
// Automatically added 28 idAI2 entities from the base game:

// custom_ai_fodder_imp
// custom_ai_fodder_soldier_blaster
// custom_ai_fodder_gargoyle
// custom_ai_fodder_zombie_tier_3
// custom_ai_heavy_hellknight
// custom_ai_heavy_revenant
// custom_ai_fodder_lostsoul
// custom_ai_fodder_soldier_shield
// custom_ai_heavy_whiplash
// custom_ai_heavy_arachnotron
// custom_ai_heavy_cacodemon
// custom_ai_ambient_zombie_cueball
// custom_ai_fodder_zombie_t1_scientist
// custom_ai_heavy_mancubus_fire
// custom_ai_ambient_tentacle
// custom_ai_fodder_carcass
// custom_ai_fodder_prowler
// custom_ai_heavy_dreadknight
// custom_ai_heavy_mancubus_goo
// custom_ai_heavy_painelemental
// custom_ai_heavy_pinky
// custom_ai_heavy_pinky_spectre
// custom_ai_superheavy_archvile
// custom_ai_superheavy_baron
// custom_ai_superheavy_doom_hunter 
// custom_ai_superheavy_marauder
// custom_ai_superheavy_tyrant
// custom_ai_ambient_buffpod
// custom_ai_fodder_zombie_maykr

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_fodder_imp {
	inherit = "ai/fodder/imp";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 0.5;
				y = 0.5;
				z = 1.60000002;
			}
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "characters/imp";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 1.71500003;
				}
				crouchedEyeOffset = {
					z = 1.06700003;
				}
			}
			actorSounds = {
				sndFootsteps = "footsteps/imp/fs_imp_concrete";
			}
			footstepEffectTable = "impacteffect/footsteps/ai_imp";
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 200;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 0.75;
			}
			footstepEffectTable_Sprint = "impacteffect/footsteps/ai_imp_sprint";
			footstepEffectTable_SlowWalk = "impacteffect/footsteps/ai_imp";
			footstepEffectTable_CrouchWalk = "impacteffect/footsteps/ai_imp";
			footstepEffectTable_Landing = "impacteffect/footsteps/ai_imp_landing";
			footstepEffectTable_HeavyLanding = "impacteffect/footsteps/ai_imp_landing";
			ledgeGrabEffectTable = "impacteffect/footsteps/ai_imp";
			ledgeGrabEffectTable_Heavy = "impacteffect/footsteps/ai_imp";
			ledgeGrabEffectTable_Friendly = "impacteffect/footsteps/ai_imp";
			ledgeGrabEffectTable_FriendlyHeavy = "impacteffect/footsteps/ai_imp";
			aimAssistData = {
				meleeTargetHeadOnly = true;
			}
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/imp/base";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 7;
						item[0] = {
							damageGroupName = "left_upper_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
						item[1] = {
							damageGroupName = "left_lower_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
						item[2] = {
							damageGroupName = "right_upper_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
						item[3] = {
							damageGroupName = "right_lower_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
						item[4] = {
							damageGroupName = "head";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
						item[5] = {
							damageGroupName = "chest";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
						item[6] = {
							damageGroupName = "gut";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 6;
				item[0] = "head";
				item[1] = "spine2";
				item[2] = "rightforearm";
				item[3] = "leftforearm";
				item[4] = "rightleg";
				item[5] = "leftleg";
			}
		}
		factionName = "imp";
		mass = 18.1439991;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/default_fodder";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_fodder_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/base";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/base";
					}
					ptr[9] = {
						componentDecl = "aicomponent/positionawareness/imp/base";
					}
					ptr[11] = {
						componentDecl = "aicomponent/transientfocus/demon/imp_default";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 3;
					item[0] = "syncmelee/imp";
					item[1] = "syncmelee/playerdeath/imp";
					item[2] = "syncmelee/imp_3p";
				}
				syncGroups = {
					num = 1;
					item[0] = {
						syncGroupName = "";
						syncInteractions = {
							num = 19;
							item[0] = "syncdeath/playervsai/imp/left_upper";
							item[1] = "syncdeath/playervsai/imp/right_upper";
							item[2] = "syncdeath/playervsai/imp/front_head";
							item[3] = "syncdeath/playervsai/imp/front_chest";
							item[4] = "syncdeath/playervsai/imp/back_upper";
							item[5] = "syncdeath/playervsai/imp/left_lower";
							item[6] = "syncdeath/playervsai/imp/right_lower";
							item[7] = "syncdeath/playervsai/imp/above_front";
							item[8] = "syncdeath/playervsai/imp/back_lower";
							item[9] = "syncdeath/playervsai/imp/above_back";
							item[10] = "syncdeath/playervsai/imp/front_lower";
							item[11] = "syncdeath/playervsai/imp/front_leftarm";
							item[12] = "syncdeath/playervsai/imp/front_rightarm";
							item[13] = "syncdeath/playervsai/imp/chainsaw/cut_back";
							item[14] = "syncdeath/playervsai/imp/chainsaw/cut_front";
							item[15] = "syncdeath/playervsai/imp/berserk/berserk_above_front";
							item[16] = "syncdeath/playervsai/imp/crucbile/crucible_front";
							item[17] = "syncdeath/playervsai/imp/berserk/berserk_front_upper";
							item[18] = "syncdeath/playervsai/imp/crucbile/crucible_back";
						}
					}
				}
			}
			componentList = "fodder/imp";
			aiDeathStat = "STAT_IMP_KILLED";
			aiDeathCodex = "codex/hell/demon_imp";
			positioningParms = {
				num = 1;
				item[0] = "imp/default";
			}
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 75;
				obstaclePerceptionRadius = 78;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 39;
				senseUpdatesOnNonEnemies = false;
				fieldOfView = {
					value = 360;
				}
				fieldOfView_close = {
					value = 360;
				}
				exposedSightTime = 0;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = false;
				explosionDecl = "ai/default";
				declTwitchPain = "twitchpain/imp";
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
			}
			cover = {
				coverRadius = 39.0140038;
				maxEnemyCoverDistance = 39.0140038;
			}
			behaviors = {
				decl = "behaviors/imp/demon_imp";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/imp";
			}
			vsAIDamageMask = "PAIN";
			spawnSettings = {
				entranceAnimPath = "animweb/characters/monsters/imp/spawn/teleport_entrance";
				spawnFXEntityDef = "fx/spawn_in_fodder";
				teleportDelayMS = 750;
				initialState = "AIOVERRIDE_FORCE_AWARENESS_OF_PLAYER";
			}
			freeze = {
				damageThreshold = 2;
				freezeTime = 8;
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 200;
					starting = 200;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/fodder/imp";
		}
		afProperties = {
			impactEffectTable = "impacteffect/ragdoll/ragdoll_fodder";
			articulatedFigure = "characters/monsters/imp_auto";
			canGetUp = true;
		}
		renderModelInfo = {
			model = "md6def/characters/monsters/imp/base/imp.md6";
			lightRigDecl = "imp/imp_default";
		}
		killerNames = {
			num = 1;
			item[0] = "#str_decl_codex_hell_demons_imp";
		}
		fxDecl = "character/imp/imp";
		startingInventory = {
			num = 4;
			item[0] = {
				startSlot = "HOLSTERED";
				showHolstered = false;
				inventoryDecl = "weapon/ai/imp/fireball";
			}
			item[1] = {
				inventoryDecl = "ammo/ai/imp/fireball";
			}
			item[2] = {
				showHolstered = false;
				inventoryDecl = "weapon/ai/imp/fireball_fastball";
			}
			item[3] = {
				inventoryDecl = "ammo/ai/imp/fireball_fastball";
			}
		}
		walkIKDecl = "walkik/imp_base";
		spawnPosition = {
			x = -154.899857;
			y = -279.800018;
			z = -18;
		}
		spawnOrientation = {
			mat = {
				mat[0] = {
					y = 2.38418579e-07;
				}
				mat[1] = {
					x = -2.38418579e-07;
				}
			}
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_fodder_soldier_blaster {
	inherit = "ai/fodder/soldier_blaster";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 0.600000024;
				y = 0.600000024;
				z = 1.829;
			}
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "characters/soldier_blaster";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 1.71500003;
				}
				crouchedEyeOffset = {
					z = 1.06700003;
				}
			}
			actorSounds = {
				sndFootsteps = "footsteps/hellified_soldier/hs_footstep";
				sndRagdollStart = "play_hell_soldier_death_short";
			}
			footstepEffectTable = "impacteffect/footsteps/ai_soldier";
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 400;
				decayRate = -20;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 0.75;
			}
			footstepEffectTable_Sprint = "impacteffect/footsteps/ai_soldier_sprint";
			footstepEffectTable_SlowWalk = "impacteffect/footsteps/ai_soldier";
			footstepEffectTable_CrouchWalk = "impacteffect/footsteps/ai_soldier";
			footstepEffectTable_Landing = "impacteffect/footsteps/ai_soldier_landing";
			footstepEffectTable_HeavyLanding = "impacteffect/footsteps/ai_soldier_landing";
			ledgeGrabEffectTable = "impacteffect/footsteps/ai_soldier";
			ledgeGrabEffectTable_Heavy = "impacteffect/footsteps/ai_soldier";
			ledgeGrabEffectTable_Friendly = "impacteffect/footsteps/ai_soldier";
			ledgeGrabEffectTable_FriendlyHeavy = "impacteffect/footsteps/ai_soldier";
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/soldier_blaster/base";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 6;
						item[0] = {
							damageGroupName = "head";
							maxGoreLevel = "GORELEVEL_TATTERED";
						}
						item[1] = {
							damageGroupName = "chest";
							maxGoreLevel = "GORELEVEL_TATTERED";
						}
						item[2] = {
							damageGroupName = "right_arm";
							maxGoreLevel = "GORELEVEL_TATTERED";
						}
						item[3] = {
							damageGroupName = "left_arm";
							maxGoreLevel = "GORELEVEL_TATTERED";
						}
						item[4] = {
							damageGroupName = "right_leg";
							maxGoreLevel = "GORELEVEL_TATTERED";
						}
						item[5] = {
							damageGroupName = "left_leg";
							maxGoreLevel = "GORELEVEL_TATTERED";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 6;
				item[0] = "head_part01_md";
				item[1] = "spine_part01_md";
				item[2] = "arm_hand_lf";
				item[3] = "arm_hand_rt";
				item[4] = "leg_lower_lf";
				item[5] = "leg_lower_rt";
			}
		}
		factionName = "blaster";
		mass = 18.1439991;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/default_fodder";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_fodder_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/base";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/base";
					}
					ptr[9] = {
						componentDecl = "aicomponent/positionawareness/soldier_blaster/base";
					}
					ptr[10] = {
						componentDecl = "aicomponent/extendedsense/soldier_blaster/base";
					}
					ptr[11] = {
						componentDecl = "aicomponent/transientfocus/soldier_blaster/base";
					}
					ptr[13] = {
						componentDecl = "aicomponent/soldier_blaster";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 2;
					item[0] = "syncmelee/soldier_blaster";
					item[1] = "syncmelee/soldier_blaster_3p";
				}
				syncGroups = {
					num = 1;
					item[0] = {
						syncGroupName = "";
						syncInteractions = {
							num = 19;
							item[0] = "syncdeath/playervsai/soldier_blaster/right_upper";
							item[1] = "syncdeath/playervsai/soldier_blaster/left_upper";
							item[2] = "syncdeath/playervsai/soldier_blaster/front_upper";
							item[3] = "syncdeath/playervsai/soldier_blaster/front_head";
							item[4] = "syncdeath/playervsai/soldier_blaster/left_lower";
							item[5] = "syncdeath/playervsai/soldier_blaster/above_back";
							item[6] = "syncdeath/playervsai/soldier_blaster/above_front";
							item[7] = "syncdeath/playervsai/soldier_blaster/front_rightarm";
							item[8] = "syncdeath/playervsai/soldier_blaster/front_leftarm";
							item[9] = "syncdeath/playervsai/soldier_blaster/berserk/berserk_above_front";
							item[10] = "syncdeath/playervsai/soldier_blaster/chainsaw/cut_back";
							item[11] = "syncdeath/playervsai/soldier_blaster/back_lower";
							item[12] = "syncdeath/playervsai/soldier_blaster/chainsaw/cut_front";
							item[13] = "syncdeath/playervsai/soldier_blaster/berserk/berserk_front_upper";
							item[14] = "syncdeath/playervsai/soldier_blaster/right_lower";
							item[15] = "syncdeath/playervsai/soldier_blaster/back_upper";
							item[16] = "syncdeath/playervsai/soldier_blaster/crucbile/crucible_front";
							item[17] = "syncdeath/playervsai/soldier_blaster/crucbile/crucible_back";
							item[18] = "syncdeath/playervsai/soldier_blaster/front_lower";
						}
					}
				}
			}
			aiDeathStat = "STAT_HELL_MARINE_KILLED";
			positioningParms = {
				num = 2;
				item[0] = "soldier_blaster/plasma";
				item[1] = "soldier_blaster/plasma_object";
			}
			aiDeathCodex = "codex/hell/demon_soldier_blaster";
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 75;
				obstaclePerceptionRadius = 78;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 39;
				senseUpdatesOnNonEnemies = false;
				fieldOfView = {
					value = 360;
				}
				fieldOfView_close = {
					value = 360;
				}
				exposedSightTime = 0;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = false;
				explosionDecl = "ai/default";
				declTwitchPain = "twitchpain/soldier_blaster";
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
			}
			cover = {
				coverRadius = 19.5070019;
			}
			behaviors = {
				decl = "behaviors/soldier_blaster/soldier_blaster";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/soldier_blaster";
			}
			vsAIDamageMask = "PAIN";
			spawnSettings = {
				entranceAnimPath = "animweb/characters/monsters/soldier_blaster/spawn/teleport_entrance";
				spawnFXEntityDef = "fx/spawn_in_fodder";
				teleportDelayMS = 750;
			}
			demonTeamInfo = {
				canHostLostSouls = true;
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 400;
					starting = 400;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/fodder/soldier";
		}
		afProperties = {
			impactEffectTable = "impacteffect/ragdoll/ragdoll_fodder";
			articulatedFigure = "characters/monsters/soldier_blaster_auto";
		}
		renderModelInfo = {
			model = "md6def/characters/monsters/soldier_blaster/base/soldier_blaster.md6";
			lightRigDecl = "soldier_blaster/soldier_blaster_default";
		}
		fxDecl = "character/hellified_soldier_blaster/hellified_soldier_blaster";
		startingInventory = {
			num = 2;
			item[0] = {
				startSlot = "EQUIPPED";
				inventoryDecl = "weapon/ai/soldier_blaster/plasma";
			}
			item[1] = {
				showHolstered = false;
				inventoryDecl = "weapon/ai/soldier_blaster/plasma_slug";
			}
		}
		walkIKDecl = "walkik/biped_base";
		killerNames = {
			num = 1;
			item[0] = "#str_decl_demoncard_summon_fodder_blaster_soldier_name_GHOST53375";
		}
		spawnPosition = {
			x = -151.200287;
			y = -276.300476;
			z = -17.9749832;
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_fodder_gargoyle {
	inherit = "ai/fodder/gargoyle";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 0.600000024;
				y = 0.600000024;
				z = 1.829;
			}
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "characters/gargoyle";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 1.71500003;
				}
				crouchedEyeOffset = {
					z = 1.06700003;
				}
			}
			actorSounds = {
				sndFootsteps = "footsteps/imp/fs_imp_concrete";
				sndRagdollStart = "play_gargoyle_death";
			}
			footstepEffectTable = "impacteffect/footsteps/ai_gargoyle";
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 300;
				decayRate = -15;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 0.75;
			}
			footstepEffectTable_Sprint = "impacteffect/footsteps/ai_gargoyle_sprint";
			footstepEffectTable_SlowWalk = "impacteffect/footsteps/ai_gargoyle";
			footstepEffectTable_CrouchWalk = "impacteffect/footsteps/ai_gargoyle_landing";
			footstepEffectTable_Landing = "impacteffect/footsteps/ai_gargoyle_landing";
			footstepEffectTable_HeavyLanding = "impacteffect/footsteps/ai_gargoyle_landing";
			ledgeGrabEffectTable = "impacteffect/footsteps/ai_imp";
			ledgeGrabEffectTable_Heavy = "impacteffect/footsteps/ai_imp";
			ledgeGrabEffectTable_Friendly = "impacteffect/footsteps/ai_imp";
			ledgeGrabEffectTable_FriendlyHeavy = "impacteffect/footsteps/ai_imp";
			aimAssistData = {
				meleeTargetHeadOnly = true;
			}
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/gargoyle/base";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 7;
						item[0] = {
							damageGroupName = "left_upper_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
						item[1] = {
							damageGroupName = "left_lower_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
						item[2] = {
							damageGroupName = "right_upper_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
						item[3] = {
							damageGroupName = "right_lower_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
						item[4] = {
							damageGroupName = "head";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
						item[5] = {
							damageGroupName = "chest";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
						item[6] = {
							damageGroupName = "gut";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 8;
				item[0] = "head_part01_md";
				item[1] = "spine_part0_md";
				item[2] = "knife_part01_lf";
				item[3] = "knife_part01_rt";
				item[4] = "leg_lowerbind_lf";
				item[5] = "leg_lowerbind_rt";
				item[6] = "wingfinger1_part03_lf";
				item[7] = "wingfinger1_part03_rt";
			}
		}
		factionName = "gargoyle";
		mass = 18.1439991;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/default_fodder";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_fodder_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/base";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/base";
					}
					ptr[9] = {
						componentDecl = "aicomponent/positionawareness/gargoyle/base";
					}
					ptr[13] = {
						componentDecl = "aicomponent/gargoyle";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 2;
					item[0] = "syncmelee/gargoyle";
					item[1] = "syncmelee/gargoyle_3p";
				}
				syncGroups = {
					num = 1;
					item[0] = {
						syncGroupName = "";
						syncInteractions = {
							num = 19;
							item[0] = "syncdeath/playervsai/gargoyle/front_chest";
							item[1] = "syncdeath/playervsai/gargoyle/front_head_01";
							item[2] = "syncdeath/playervsai/gargoyle/chainsaw/cut_front_01";
							item[3] = "syncdeath/playervsai/gargoyle/left_lower";
							item[4] = "syncdeath/playervsai/gargoyle/chainsaw/cut_back";
							item[5] = "syncdeath/playervsai/gargoyle/back_upper";
							item[6] = "syncdeath/playervsai/gargoyle/above_front";
							item[7] = "syncdeath/playervsai/gargoyle/front_lower";
							item[8] = "syncdeath/playervsai/gargoyle/right_lower";
							item[9] = "syncdeath/playervsai/gargoyle/back_lower";
							item[10] = "syncdeath/playervsai/gargoyle/above_back";
							item[11] = "syncdeath/playervsai/gargoyle/right_upper";
							item[12] = "syncdeath/playervsai/gargoyle/front_leftarm";
							item[13] = "syncdeath/playervsai/gargoyle/left_upper";
							item[14] = "syncdeath/playervsai/gargoyle/front_rightarm";
							item[15] = "syncdeath/playervsai/gargoyle/berserk/berserk_above_front";
							item[16] = "syncdeath/playervsai/gargoyle/crucbile/crucible_front";
							item[17] = "syncdeath/playervsai/gargoyle/berserk/berserk_front";
							item[18] = "syncdeath/playervsai/gargoyle/crucbile/crucible_back";
						}
					}
				}
			}
			aiDeathStat = "STAT_IMP_KILLED";
			aiDeathCodex = "codex/hell/demon_gargoyle";
			positioningParms = {
				num = 1;
				item[0] = "gargoyle/default";
			}
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 75;
				obstaclePerceptionRadius = 78;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 39;
				senseUpdatesOnNonEnemies = false;
				fieldOfView = {
					value = 360;
				}
				fieldOfView_close = {
					value = 360;
				}
				exposedSightTime = 0;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = false;
				explosionDecl = "ai/default";
				declTwitchPain = "twitchpain/gargoyle";
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
			}
			cover = {
				coverRadius = 39.0140038;
				maxEnemyCoverDistance = 39.0140038;
			}
			behaviors = {
				decl = "behaviors/gargoyle/default";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/gargoyle";
			}
			vsAIDamageMask = "PAIN";
			spawnSettings = {
				entranceAnimPath = "animweb/characters/monsters/gargoyle/spawn/teleport_entrance";
				spawnFXEntityDef = "fx/spawn_in_fodder";
				teleportDelayMS = 750;
			}
			freeze = {
				damageThreshold = 2;
				freezeTime = 8;
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 300;
					starting = 300;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/fodder/gargoyle";
		}
		afProperties = {
			impactEffectTable = "impacteffect/ragdoll/ragdoll_fodder";
			articulatedFigure = "characters/monsters/gargoyle";
		}
		renderModelInfo = {
			model = "md6def/characters/monsters/gargoyle/base/gargoyle.md6";
			lightRigDecl = "gargoyle/gargoyle_default";
		}
		killerNames = {
			num = 1;
			item[0] = "#str_decl_codex_hell_demons_gargoyle";
		}
		fxDecl = "character/gargoyle/gargoyle";
		walkIKDecl = "walkik/imp_base";
		spawnPosition = {
			x = -152.899887;
			y = -279.80011;
			z = -18;
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_fodder_zombie_tier_3 {
	inherit = "ai/fodder/zombie_tier_3";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 0.400000006;
				y = 0.400000006;
				z = 2.0999999;
			}
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "characters/zombie";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 1.63829994;
				}
				crouchedEyeOffset = {
					z = 0.609600008;
				}
			}
			actorSounds = {
				sndFootsteps = "footsteps/zombies/zombies_default";
				sndPainSmall = "player/pain/small";
				sndPainMedium = "player/pain/medium";
				sndPainLarge = "player/pain/large";
				sndRagdollStart = "play_zombie_death";
			}
			footstepEffectTable = "impacteffect/footsteps/ai_zombiet3";
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 500;
				decayRate = -25;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 1;
			}
			footstepEffectTable_Sprint = NULL;
			footstepEffectTable_SlowWalk = NULL;
			footstepEffectTable_CrouchWalk = NULL;
			footstepEffectTable_Landing = NULL;
			footstepEffectTable_HeavyLanding = NULL;
			ledgeGrabEffectTable = "impacteffect/footsteps/ai_zombie";
			ledgeGrabEffectTable_Heavy = "impacteffect/footsteps/ai_zombie";
			ledgeGrabEffectTable_Friendly = "impacteffect/footsteps/ai_zombie";
			ledgeGrabEffectTable_FriendlyHeavy = "impacteffect/footsteps/ai_zombie";
			rearFootstepEffectTable = "impacteffect/footsteps/ai_zombiet3right";
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/zombie_t3/base";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 1;
						item[0] = {
							damageGroupName = "left_upper_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 6;
				item[0] = "head_part01_md";
				item[1] = "spine_part01_md";
				item[2] = "arm_hand_lf";
				item[3] = "arm_hand_rt";
				item[4] = "leg_lower_lf";
				item[5] = "leg_lower_rt";
			}
		}
		factionName = "zombie_t3";
		mass = 18.1439991;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/default_fodder";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_fodder_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/zombie";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/base";
					}
					ptr[9] = {
						componentDecl = "aicomponent/positionawareness/zombie/tier_3";
					}
					ptr[13] = {
						componentDecl = "aicomponent/zombie_t3";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 2;
					item[0] = "syncmelee/zombie_tier3";
					item[1] = "syncmelee/zombie_tier3_3p";
				}
				syncGroups = {
					num = 1;
					item[0] = {
						syncGroupName = "";
						syncInteractions = {
							num = 19;
							item[0] = "syncdeath/playervsai/zombie_tier3/front_head";
							item[1] = "syncdeath/playervsai/zombie_tier3/left_upper";
							item[2] = "syncdeath/playervsai/zombie_tier3/back_head";
							item[3] = "syncdeath/playervsai/zombie_tier3/front_chest";
							item[4] = "syncdeath/playervsai/zombie_tier3/right_upper";
							item[5] = "syncdeath/playervsai/zombie_tier3/above_front";
							item[6] = "syncdeath/playervsai/zombie_tier3/front_rightarm";
							item[7] = "syncdeath/playervsai/zombie_tier3/above_back";
							item[8] = "syncdeath/playervsai/zombie_tier3/front_leftarm";
							item[9] = "syncdeath/playervsai/zombie_tier3/right_lower";
							item[10] = "syncdeath/playervsai/zombie_tier3/back_lower";
							item[11] = "syncdeath/playervsai/zombie_tier3/left_lower";
							item[12] = "syncdeath/playervsai/zombie_tier3/chainsaw/cut_back";
							item[13] = "syncdeath/playervsai/zombie_tier3/chainsaw/cut_front";
							item[14] = "syncdeath/playervsai/zombie_tier3/front_lower";
							item[15] = "syncdeath/playervsai/zombie_tier3/berserk/berserk_front_upper";
							item[16] = "syncdeath/playervsai/zombie_tier3/berserk/berserk_above_front";
							item[17] = "syncdeath/playervsai/zombie_tier3/crucbile/crucible_front";
							item[18] = "syncdeath/playervsai/zombie_tier3/crucbile/crucible_back";
						}
					}
				}
			}
			aiDeathStat = "STAT_ZOMBIE_KILLED";
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 75;
				obstaclePerceptionRadius = 39;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 14;
				senseUpdatesOnNonEnemies = false;
				fieldOfView = {
					value = 360;
				}
				fieldOfView_close = {
					value = 360;
				}
				exposedSightTime = 0;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = true;
				explosionDecl = NULL;
				declTwitchPain = "twitchpain/zombie_t3";
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
				preferredCombatWalkState = "WALKSTATE_WALKING";
			}
			cover = {
				coverRadius = 0;
			}
			behaviors = {
				decl = "behaviors/zombie/tier_3";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/zombie_tier_3";
			}
			vsAIDamageMask = "PAIN";
			spawnSettings = {
				entranceAnimPath = "animweb/characters/monsters/zombie_tier_3/spawn/teleport_entrance";
				spawnFXEntityDef = "fx/spawn_in_fodder";
				teleportDelayMS = 750;
				chanceMissingArmor = {
					num = 1;
					item[0] = {
						damageGroup = "head";
						missingChance = 100;
					}
				}
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 500;
					starting = 500;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/fodder/zombie_tier3";
		}
		afProperties = {
			impactEffectTable = "impacteffect/ragdoll/ragdoll_fodder";
			articulatedFigure = "characters/monsters/zombie_t3";
		}
		renderModelInfo = {
			model = "md6def/characters/monsters/zombie_tier3/base/zombie_tier3.md6";
			lightRigDecl = "zombie_tier3/zombie_tier3_default";
		}
		fxDecl = "character/zombie_tier3/zombie_tier3";
		walkIKDecl = "walkik/zombie";
		killerNames = {
			num = 1;
			item[0] = "#str_decl_damage_mecha_zombie_GHOST81186";
		}
		startingInventory = {
			num = 2;
			item[0] = {
				startSlot = "EQUIPPED";
				inventoryDecl = "weapon/ai/zombie/plasma_t3";
			}
			item[1] = {
				inventoryDecl = "weapon/ai/zombie/plasma_slug";
			}
		}
		spawnPosition = {
			x = -153.499847;
			y = -276.5;
			z = -17.9749832;
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_heavy_hellknight {
	inherit = "ai/heavy/hellknight";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 0.699999988;
				y = 0.699999988;
				z = 2.0999999;
			}
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "characters/hellknight";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 1.71500003;
				}
				crouchedEyeOffset = {
					z = 1.06700003;
				}
			}
			actorSounds = {
				sndFootsteps = "play_md6_editor_footstep";
			}
			footstepEffectTable = "impacteffect/footsteps/ai_hellknight";
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 2500;
				decayRate = -250;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 0.75;
			}
			footstepEffectTable_Sprint = "impacteffect/footsteps/ai_hellknight_sprint";
			footstepEffectTable_SlowWalk = "impacteffect/footsteps/ai_hellknight";
			footstepEffectTable_CrouchWalk = "impacteffect/footsteps/ai_hellknight";
			footstepEffectTable_Landing = "impacteffect/footsteps/ai_hellknight_landing";
			footstepEffectTable_HeavyLanding = "impacteffect/footsteps/ai_hellknight_landing";
			ledgeGrabEffectTable = "impacteffect/footsteps/ai_hellknight";
			ledgeGrabEffectTable_Heavy = "impacteffect/footsteps/ai_hellknight";
			ledgeGrabEffectTable_Friendly = "impacteffect/footsteps/ai_hellknight";
			ledgeGrabEffectTable_FriendlyHeavy = "impacteffect/footsteps/ai_hellknight";
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/hellknight/base";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 1;
						item[0] = {
							damageGroupName = "left_upper_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 6;
				item[0] = "head";
				item[1] = "spine2";
				item[2] = "rightforearm";
				item[3] = "leftforearm";
				item[4] = "rightleg";
				item[5] = "leftleg";
			}
		}
		factionName = "hell_knight";
		mass = 18.1439991;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/default_heavy";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_heavy_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/hellknight";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/hellknight";
					}
					ptr[6] = {
						componentDecl = "aicomponent/hellknight";
					}
					ptr[9] = {
						componentDecl = "aicomponent/positionawareness/hellknight/base";
					}
					ptr[11] = {
						componentDecl = "aicomponent/transientfocus/demon/hellknight_default";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 2;
					item[0] = "syncmelee/hellknight";
					item[1] = "syncmelee/hellknight_3p";
				}
				syncGroups = {
					num = 1;
					item[0] = {
						syncGroupName = "";
						syncInteractions = {
							num = 13;
							item[0] = "syncdeath/playervsai/hellknight/above_front";
							item[1] = "syncdeath/playervsai/hellknight/above_back";
							item[2] = "syncdeath/playervsai/hellknight/back_upper";
							item[3] = "syncdeath/playervsai/hellknight/left_upper";
							item[4] = "syncdeath/playervsai/hellknight/right_upper";
							item[5] = "syncdeath/playervsai/hellknight/front_head";
							item[6] = "syncdeath/playervsai/hellknight/chainsaw/cut_front_01";
							item[7] = "syncdeath/playervsai/hellknight/front_lower";
							item[8] = "syncdeath/playervsai/hellknight/chainsaw/cut_back";
							item[9] = "syncdeath/playervsai/hellknight/crucbile/crucible_front";
							item[10] = "syncdeath/playervsai/hellknight/berserk/berserk_front_upper";
							item[11] = "syncdeath/playervsai/hellknight/berserk/berserk_above_front";
							item[12] = "syncdeath/playervsai/hellknight/crucbile/crucible_back";
						}
					}
				}
			}
			aiDeathStat = "STAT_HELLKNIGHT_KILLED";
			aiDeathCodex = "codex/hell/demon_hellknight";
			positioningParms = {
				num = 1;
				item[0] = "hellknight/default";
			}
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 75;
				obstaclePerceptionRadius = 78;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 39;
				senseUpdatesOnNonEnemies = false;
				fieldOfView = {
					value = 360;
				}
				fieldOfView_close = {
					value = 360;
				}
				exposedSightTime = 0;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = false;
				explosionDecl = "ai/default";
				declTwitchPain = "twitchpain/hellknight";
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
			}
			cover = {
				coverRadius = 0;
				maxEnemyCoverDistance = 0;
			}
			behaviors = {
				decl = "behaviors/hellknight/default";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/hellknight";
			}
			vsAIDamageMask = "PAIN";
			spawnSettings = {
				entranceAnimPath = "animweb/characters/monsters/hellknight/spawn/teleport_entrance";
				spawnFXEntityDef = "fx/spawn_in_heavy";
				teleportDelayMS = 1250;
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 2500;
					starting = 2500;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/heavy/hellknight";
		}
		afProperties = {
			impactEffectTable = "impacteffect/ragdoll/ragdoll_heavy";
			articulatedFigure = "characters/monsters/hellknight_auto";
		}
		renderModelInfo = {
			model = "md6def/characters/monsters/hellknight/base/hellknight.md6";
			lightRigDecl = "hellknight/hellknight_default";
		}
		killerNames = {
			num = 1;
			item[0] = "#str_decl_codex_hell_demons_hellknight";
		}
		fxDecl = "character/hellknight/hellknight";
		walkIKDecl = "walkik/hellknight";
		spawnPosition = {
			x = -149.799881;
			y = -284.300171;
			z = -18.5;
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_heavy_revenant {
	inherit = "ai/heavy/revenant";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 0.699999988;
				y = 0.699999988;
				z = 2.29999995;
			}
		}
		dormancy = {
			delay = 30;
			distance = 0.372000009;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "characters/revenant";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 0.0329999998;
				}
				crouchedEyeOffset = {
					z = 0.0199999996;
				}
			}
			actorSounds = {
				sndFootsteps = "footsteps/imp/fs_imp_concrete";
			}
			footstepEffectTable = "impacteffect/footsteps/ai_revenant";
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 2000;
				decayRate = -200;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 0.75;
			}
			footstepEffectTable_Sprint = "impacteffect/footsteps/ai_revenant_sprint";
			footstepEffectTable_SlowWalk = "impacteffect/footsteps/ai_revenant";
			footstepEffectTable_CrouchWalk = "impacteffect/footsteps/ai_revenant";
			footstepEffectTable_Landing = "impacteffect/footsteps/ai_revenant_land";
			footstepEffectTable_HeavyLanding = "impacteffect/footsteps/ai_revenant_land";
			ledgeGrabEffectTable = "impacteffect/footsteps/ai_revenant";
			ledgeGrabEffectTable_Heavy = "impacteffect/footsteps/ai_revenant";
			ledgeGrabEffectTable_Friendly = "impacteffect/footsteps/ai_revenant";
			ledgeGrabEffectTable_FriendlyHeavy = "impacteffect/footsteps/ai_revenant";
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/revenant/base";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 7;
						item[0] = {
							damageGroupName = "left_upper_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
						item[1] = {
							damageGroupName = "left_lower_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
						item[2] = {
							damageGroupName = "right_upper_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
						item[3] = {
							damageGroupName = "right_lower_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
						item[4] = {
							damageGroupName = "head";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
						item[5] = {
							damageGroupName = "chest";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
						item[6] = {
							damageGroupName = "gut";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 6;
				item[0] = "head";
				item[1] = "spine2";
				item[2] = "rightforearm";
				item[3] = "leftforearm";
				item[4] = "rightleg";
				item[5] = "leftleg";
			}
			radiusDamageHitTestGroups = {
				num = 2;
				item[0] = "left_gun";
				item[1] = "right_gun";
			}
		}
		factionName = "revenant";
		mass = 8.2301178;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/default_heavy";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_heavy_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/base";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/revenant";
					}
					ptr[7] = {
						componentDecl = "revenant";
					}
					ptr[9] = {
						componentDecl = "aicomponent/positionawareness/revenant/base";
					}
					ptr[10] = {
						componentDecl = "aicomponent/extendedsense/revenant/base";
					}
					ptr[20] = {
						componentDecl = "aicomponent/jetpack/revenant";
					}
					ptr[21] = {
						componentDecl = "aicomponent/lasertargeter/demon/revenant";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 2;
					item[0] = "syncmelee/revenant";
					item[1] = "syncmelee/revenant_3p";
				}
				syncGroups = {
					num = 1;
					item[0] = {
						syncGroupName = "";
						syncInteractions = {
							num = 12;
							item[0] = "syncdeath/playervsai/revenant/front_upper";
							item[1] = "syncdeath/playervsai/revenant/left_upper";
							item[2] = "syncdeath/playervsai/revenant/right_upper";
							item[3] = "syncdeath/playervsai/revenant/back_upper";
							item[4] = "syncdeath/playervsai/revenant/above_front";
							item[5] = "syncdeath/playervsai/revenant/above_back";
							item[6] = "syncdeath/playervsai/revenant/berserk/berserk_above_front";
							item[7] = "syncdeath/playervsai/revenant/chainsaw/cut_front";
							item[8] = "syncdeath/playervsai/revenant/chainsaw/cut_back";
							item[9] = "syncdeath/playervsai/revenant/crucbile/crucible_front";
							item[10] = "syncdeath/playervsai/revenant/berserk/berserk_front_upper";
							item[11] = "syncdeath/playervsai/revenant/crucbile/crucible_back";
						}
					}
				}
			}
			aiDeathStat = "STAT_REVENANT_KILLED";
			aiDeathCodex = "codex/hell/demon_revenant";
			positioningParms = {
				num = 3;
				item[0] = "revenant/default";
				item[1] = "revenant/evasive";
				item[2] = "revenant/pressure";
			}
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 75;
				obstaclePerceptionRadius = 78;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 39;
				senseUpdatesOnNonEnemies = false;
				fieldOfView = {
					value = 360;
				}
				fieldOfView_close = {
					value = 360;
				}
				exposedSightTime = 0;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = false;
				explosionDecl = "ai/revenant/jetpack";
				declTwitchPain = "twitchpain/revenant";
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
				preferredCombatWalkState = "WALKSTATE_WALKING";
			}
			cover = {
				coverRadius = 39.0140038;
				maxEnemyCoverDistance = 39.0140038;
			}
			behaviors = {
				decl = "behaviors/revenant/default";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/revenant";
			}
			vsAIDamageMask = "PAIN";
			spawnSettings = {
				entranceAnimPath = "animweb/characters/monsters/revenant/spawn/teleport_entrance";
				spawnFXEntityDef = "fx/spawn_in_heavy";
				teleportDelayMS = 1250;
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 2000;
					starting = 2000;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/heavy/revenant";
		}
		afProperties = {
			impactEffectTable = "impacteffect/ragdoll/ragdoll_heavy";
			articulatedFigure = "characters/monsters/revenant";
		}
		renderModelInfo = {
			model = "md6def/characters/monsters/revenant/base/revenant.md6";
			lightRigDecl = "revenant/revenant_default";
		}
		killerNames = {
			num = 1;
			item[0] = "#str_decl_codex_hell_demons_revenant";
		}
		fxDecl = "character/revenant/revenant";
		startingInventory = {
			num = 8;
			item[0] = {
				startSlot = "EQUIPPED";
				showHolstered = false;
				inventoryDecl = "weapon/ai/revenant/rocket_corkscrew_left";
			}
			item[1] = {
				startSlot = "EQUIPPED";
				showHolstered = false;
				inventoryDecl = "weapon/ai/revenant/rocket_corkscrew_right";
			}
			item[2] = {
				startSlot = "HOLSTERED";
				showHolstered = false;
				inventoryDecl = "weapon/ai/revenant/rocket_bombard_left";
			}
			item[3] = {
				startSlot = "HOLSTERED";
				showHolstered = false;
				inventoryDecl = "weapon/ai/revenant/rocket_bombard_right";
			}
			item[4] = {
				startSlot = "HOLSTERED";
				showHolstered = false;
				inventoryDecl = "weapon/ai/revenant/rocket_hop_left";
			}
			item[5] = {
				startSlot = "HOLSTERED";
				showHolstered = false;
				inventoryDecl = "weapon/ai/revenant/rocket_hop_right";
			}
			item[6] = {
				startSlot = "HOLSTERED";
				showHolstered = false;
				inventoryDecl = "weapon/ai/revenant/rocket_barrage_left";
			}
			item[7] = {
				startSlot = "HOLSTERED";
				showHolstered = false;
				inventoryDecl = "weapon/ai/revenant/rocket_barrage_right";
			}
		}
		walkIKDecl = "walkik/biped_base";
		spawnPosition = {
			x = -147.899948;
			y = -280.200012;
			z = -18.5000076;
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_fodder_lostsoul {
	inherit = "ai/fodder/lostsoul";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 0.838;
				y = 0.838;
				z = 0.838;
			}
			offset = {
				z = -0.419;
			}
			ignoreUnfixCollisionOffsetBug = true;
		}
		dormancy = {
			delay = 30;
			distance = 0.372000009;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "characters/lostsoul";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 1.63800001;
				}
				crouchedEyeOffset = {
					z = 0.610000014;
				}
			}
			actorSounds = {
				sndFootsteps = "footsteps/zombies/zombies_default";
				sndPainSmall = "player/pain/small";
				sndPainMedium = "player/pain/medium";
				sndPainLarge = "player/pain/large";
			}
			footstepEffectTable = NULL;
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				decayRate = 0;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 0.75;
			}
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/lostsoul/base";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 1;
						item[0] = {
							damageGroupName = "left_upper_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 2;
				item[0] = "head";
				item[1] = "jaw_jnt";
			}
		}
		factionName = "lost_soul";
		mass = 8.2301178;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/default_fodder";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_fodder_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/lostsoul";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/base";
					}
					ptr[22] = {
						componentDecl = "aicomponent/lostsoul/lostsoul";
					}
					ptr[23] = {
						componentDecl = "aicomponent/flight/lostsoul_standalone";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
			}
			aiDeathStat = "STAT_LOST_SOUL_KILLED";
			aiDeathCodex = "codex/hell/demon_lostsoul";
			defaultHitJoint = "Head";
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 75;
				obstaclePerceptionRadius = 1.5;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 39;
				senseUpdatesOnNonEnemies = false;
				fieldOfView = {
					value = 360;
				}
				fieldOfView_close = {
					value = 360;
				}
				exposedSightTime = 0;
				fieldOfView_close = {
					value = 360;
				}
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 1;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 1;
				}
				canBecomeInjured = false;
				explosionDecl = "ai/lostsoul/killed";
				declTwitchPain = "twitchpain/lostsoul";
				useDeathAnims = false;
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
				preferredCombatWalkState = "WALKSTATE_WALKING";
			}
			cover = {
				coverRadius = 0;
			}
			behaviors = {
				decl = "behaviors/lostsoul/default";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/lostsoul";
			}
			vsAIDamageMask = "PAIN";
			spawnSettings = {
				initialState = "AIOVERRIDE_FORCE_AWARENESS_OF_PLAYER";
				entranceAnimPath = "animweb/characters/monsters/lostsoul/spawn/teleport_entrance";
				spawnFXEntityDef = "fx/spawn_in_fodder_tiny";
				teleportDelayMS = 750;
			}
			tempMemoryData = {
				num = 1;
				item[0] = {
					key = "lostsoul_wait_charge";
					value = 1;
				}
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/fodder/lost_soul";
		}
		afProperties = {
			impactEffectTable = "impacteffect/ragdoll/ragdoll_fodder";
			articulatedFigure = "characters/monsters/lostsoul";
		}
		renderModelInfo = {
			model = "md6def/characters/monsters/lostsoul/base/lostsoul.md6";
			lightRigDecl = "lostsoul/lostsoul_default";
		}
		killerNames = {
			num = 1;
			item[0] = "#str_decl_codex_hell_demons_lostsoul";
		}
		fxDecl = "character/lost_soul/lost_soul";
		walkIK = {
			enabled = false;
		}
		spawnPosition = {
			x = -146.599869;
			y = -276.599823;
			z = -16.800005;
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_fodder_soldier_shield {
	inherit = "ai/fodder/soldier_shield";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 0.600000024;
				y = 0.600000024;
				z = 1.829;
			}
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "characters/soldier_blaster";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 1.71500003;
				}
				crouchedEyeOffset = {
					z = 1.06700003;
				}
			}
			actorSounds = {
				sndFootsteps = "footsteps/hellified_soldier/hs_footstep";
				sndRagdollStart = "play_hell_soldier_death_short";
			}
			footstepEffectTable = "impacteffect/footsteps/ai_soldier";
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 500;
				decayRate = -25;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 0.75;
			}
			footstepEffectTable_Sprint = "impacteffect/footsteps/ai_soldier_sprint";
			footstepEffectTable_SlowWalk = "impacteffect/footsteps/ai_soldier";
			footstepEffectTable_CrouchWalk = "impacteffect/footsteps/ai_soldier";
			footstepEffectTable_Landing = "impacteffect/footsteps/ai_soldier_landing";
			footstepEffectTable_HeavyLanding = "impacteffect/footsteps/ai_soldier_landing";
			ledgeGrabEffectTable = "impacteffect/footsteps/ai_soldier";
			ledgeGrabEffectTable_Heavy = "impacteffect/footsteps/ai_soldier";
			ledgeGrabEffectTable_Friendly = "impacteffect/footsteps/ai_soldier";
			ledgeGrabEffectTable_FriendlyHeavy = "impacteffect/footsteps/ai_soldier";
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/soldier_shield/base";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 6;
						item[0] = {
							damageGroupName = "head";
							maxGoreLevel = "GORELEVEL_TATTERED";
						}
						item[1] = {
							damageGroupName = "chest";
							maxGoreLevel = "GORELEVEL_TATTERED";
						}
						item[2] = {
							damageGroupName = "right_arm";
							maxGoreLevel = "GORELEVEL_TATTERED";
						}
						item[3] = {
							damageGroupName = "left_arm";
							maxGoreLevel = "GORELEVEL_TATTERED";
						}
						item[4] = {
							damageGroupName = "right_leg";
							maxGoreLevel = "GORELEVEL_TATTERED";
						}
						item[5] = {
							damageGroupName = "left_leg";
							maxGoreLevel = "GORELEVEL_TATTERED";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 6;
				item[0] = "head_part01_md";
				item[1] = "spine_part01_md";
				item[2] = "arm_hand_lf";
				item[3] = "arm_hand_rt";
				item[4] = "leg_lower_lf";
				item[5] = "leg_lower_rt";
			}
		}
		factionName = "shield";
		mass = 18.1439991;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/default_fodder";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_fodder_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/base";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/base";
					}
					ptr[9] = {
						componentDecl = "aicomponent/positionawareness/soldier_shield/base";
					}
					ptr[10] = {
						componentDecl = "aicomponent/extendedsense/soldier_shield/base";
					}
					ptr[11] = {
						componentDecl = "aicomponent/transientfocus/soldier_blaster/base";
					}
					ptr[7] = {
						componentDecl = "soldier_shield";
					}
					ptr[13] = {
						componentDecl = "aicomponent/soldier_shield";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 2;
					item[0] = "syncmelee/soldier_shield";
					item[1] = "syncmelee/soldier_blaster_3p";
				}
				syncGroups = {
					num = 1;
					item[0] = {
						syncGroupName = "";
						syncInteractions = {
							num = 19;
							item[0] = "syncdeath/playervsai/soldier_blaster/right_upper";
							item[1] = "syncdeath/playervsai/soldier_blaster/left_upper";
							item[2] = "syncdeath/playervsai/soldier_blaster/front_upper";
							item[3] = "syncdeath/playervsai/soldier_blaster/front_head";
							item[4] = "syncdeath/playervsai/soldier_blaster/left_lower";
							item[5] = "syncdeath/playervsai/soldier_blaster/above_back";
							item[6] = "syncdeath/playervsai/soldier_blaster/above_front";
							item[7] = "syncdeath/playervsai/soldier_blaster/front_rightarm";
							item[8] = "syncdeath/playervsai/soldier_blaster/front_leftarm";
							item[9] = "syncdeath/playervsai/soldier_blaster/berserk/berserk_above_front";
							item[10] = "syncdeath/playervsai/soldier_blaster/chainsaw/cut_back";
							item[11] = "syncdeath/playervsai/soldier_blaster/back_lower";
							item[12] = "syncdeath/playervsai/soldier_blaster/chainsaw/cut_front";
							item[13] = "syncdeath/playervsai/soldier_blaster/berserk/berserk_front_upper";
							item[14] = "syncdeath/playervsai/soldier_blaster/right_lower";
							item[15] = "syncdeath/playervsai/soldier_blaster/back_upper";
							item[16] = "syncdeath/playervsai/soldier_blaster/crucbile/crucible_front";
							item[17] = "syncdeath/playervsai/soldier_blaster/crucbile/crucible_back";
							item[18] = "syncdeath/playervsai/soldier_blaster/front_lower";
						}
					}
				}
			}
			aiDeathStat = "STAT_HELL_SHOTGUNNER_KILLED";
			positioningParms = {
				num = 1;
				item[0] = "soldier_shield/default";
			}
			aiDeathCodex = "codex/hell/demon_soldier_blaster";
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 75;
				obstaclePerceptionRadius = 78;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 39;
				senseUpdatesOnNonEnemies = false;
				fieldOfView = {
					value = 360;
				}
				fieldOfView_close = {
					value = 360;
				}
				exposedSightTime = 0;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = false;
				explosionDecl = "ai/default";
				declTwitchPain = "twitchpain/soldier_shield";
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
			}
			cover = {
				coverRadius = 19.5070019;
			}
			behaviors = {
				decl = "behaviors/soldier_shield/default";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/soldier_shield";
			}
			vsAIDamageMask = "PAIN";
			spawnSettings = {
				entranceAnimPath = "animweb/characters/monsters/soldier_blaster/spawn/teleport_entrance";
				spawnFXEntityDef = "fx/spawn_in_fodder";
				teleportDelayMS = 750;
			}
			demonTeamInfo = {
				canHostLostSouls = true;
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 500;
					starting = 500;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/fodder/soldier_shield";
		}
		afProperties = {
			impactEffectTable = "impacteffect/ragdoll/ragdoll_fodder";
			articulatedFigure = "characters/monsters/soldier_blaster_auto";
		}
		renderModelInfo = {
			model = "md6def/characters/monsters/soldier_shield/base/soldier_shield.md6";
			lightRigDecl = "soldier_shield/soldier_shield_default";
			materialRemap = {
				num = 4;
				item[0] = {
					from = "models/monsters/soldier/soldier_blaster_head";
					to = "models/monsters/soldier_shield/soldier_shield_head";
				}
				item[1] = {
					from = "models/monsters/soldier/soldier_blaster_body";
					to = "models/monsters/soldier_shield/soldier_shield_body";
				}
				item[2] = {
					from = "models/monsters/soldier/soldier_blaster_armor";
					to = "models/monsters/soldier_shield/soldier_shield_armor";
				}
				item[3] = {
					from = "models/monsters/soldier/soldier_blaster_legs";
					to = "models/monsters/soldier_shield/soldier_shield_legs";
				}
			}
			showHideMeshInfo = {
				bodyKit = "Shield";
			}
		}
		fxDecl = "character/hellified_soldier_shield/hellified_soldier_shield";
		startingInventory = {
			num = 2;
			item[0] = {
				startSlot = "EQUIPPED";
				inventoryDecl = "weapon/ai/soldier_shield/shotgun";
			}
			item[1] = {
				showHolstered = false;
				inventoryDecl = "weapon/ai/soldier_shield/shotgun_precision";
			}
		}
		walkIKDecl = "walkik/biped_base";
		killerNames = {
			num = 1;
			item[0] = "#str_decl_codex_hell_demons_soldier_shield";
		}
		spawnPosition = {
			x = -149.399902;
			y = -276.39978;
			z = -17.9999962;
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_heavy_whiplash {
	inherit = "ai/heavy/whiplash";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 0.600000024;
				y = 0.600000024;
				z = 1.829;
			}
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "default";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 1.71500003;
				}
				crouchedEyeOffset = {
					z = 1.06700003;
				}
			}
			actorSounds = {
				sndFootsteps = "play_md6_editor_footstep";
			}
			footstepEffectTable = "impacteffect/footsteps/ai_walk_s";
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 2000;
				decayRate = -200;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 0.75;
			}
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/whiplash/base";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 1;
						item[0] = {
							damageGroupName = "left_upper_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 8;
				item[0] = "head_part01_md";
				item[1] = "spine_part01_md";
				item[2] = "arm_hand_lf";
				item[3] = "arm_hand_rt";
				item[4] = "tail_part03_md";
				item[5] = "tail_part05_md";
				item[6] = "tail_part09_md";
				item[7] = "tail_part13_md";
			}
		}
		factionName = "whiplash";
		mass = 18.1439991;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/default_heavy";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_heavy_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/base";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/base";
					}
					ptr[7] = {
						componentDecl = "whiplash";
					}
					ptr[9] = {
						componentDecl = "aicomponent/positionawareness/whiplash/base";
					}
					ptr[13] = {
						componentDecl = "aicomponent/whiplash";
					}
					ptr[15] = {
						componentDecl = "aicomponent/waveblast/whiplash/lashes";
					}
					ptr[28] = {
						componentDecl = "aicomponent/whiplash/whiplash";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 2;
					item[0] = "syncmelee/whiplash";
					item[1] = "syncmelee/whiplash_3p";
				}
				syncGroups = {
					num = 1;
					item[0] = {
						syncGroupName = "";
						syncInteractions = {
							num = 12;
							item[0] = "syncdeath/playervsai/whiplash/right_upper";
							item[1] = "syncdeath/playervsai/whiplash/back_upper";
							item[2] = "syncdeath/playervsai/whiplash/above_front";
							item[3] = "syncdeath/playervsai/whiplash/above_back";
							item[4] = "syncdeath/playervsai/whiplash/crucbile/crucible_front";
							item[5] = "syncdeath/playervsai/whiplash/crucbile/crucible_back";
							item[6] = "syncdeath/playervsai/whiplash/front_upper";
							item[7] = "syncdeath/playervsai/whiplash/chainsaw/cut_front";
							item[8] = "syncdeath/playervsai/whiplash/chainsaw/cut_back";
							item[9] = "syncdeath/playervsai/whiplash/left_upper";
							item[10] = "syncdeath/playervsai/whiplash/berserk/berserk_above_front";
							item[11] = "syncdeath/playervsai/whiplash/berserk/berserk_front_upper";
						}
					}
				}
			}
			aiDeathCodex = "codex/hell/demon_whiplash";
			positioningParms = {
				num = 1;
				item[0] = "whiplash/default";
			}
			defaultHitJoint = "spine_part01_md";
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 75;
				obstaclePerceptionRadius = 78;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 39;
				senseUpdatesOnNonEnemies = false;
				fieldOfView = {
					value = 360;
				}
				fieldOfView_close = {
					value = 360;
				}
				exposedSightTime = 0;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = false;
				explosionDecl = "ai/default";
				deathSounds = {
					num = 1;
					item[0] = {
						soundShader = "stop_whiplash_flank_loop_1";
					}
				}
				declTwitchPain = "twitchpain/whiplash";
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
			}
			cover = {
				coverRadius = 39.0139999;
				maxEnemyCoverDistance = 39.0139999;
			}
			behaviors = {
				decl = "behaviors/whiplash/default";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/whiplash";
			}
			vsAIDamageMask = "PAIN";
			spawnSettings = {
				entranceAnimPath = "animweb/characters/monsters/whiplash/spawn/teleport_entrance";
				spawnFXEntityDef = "fx/spawn_in_heavy";
				teleportDelayMS = 1250;
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 2000;
					starting = 2000;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/heavy/whiplash";
		}
		afProperties = {
			impactEffectTable = "impacteffect/ragdoll/ragdoll_heavy";
			articulatedFigure = "characters/monsters/whiplash";
		}
		renderModelInfo = {
			model = "md6def/characters/monsters/whiplash/base/whiplash.md6";
			lightRigDecl = "whiplash/whiplash_default";
		}
		fxDecl = "character/whiplash/whiplash";
		killerNames = {
			num = 1;
			item[0] = "#str_decl_codex_hell_demons_whiplash";
		}
		spawnPosition = {
			x = -146.100021;
			y = -284.5;
			z = -18;
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_heavy_arachnotron {
	inherit = "ai/heavy/arachnotron";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 1.5;
				y = 1.5;
				z = 2;
			}
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "characters/arachnotron";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 1.71500003;
				}
				crouchedEyeOffset = {
					z = 1.06700003;
				}
			}
			actorSounds = {
				sndFootsteps = "play_md6_editor_footstep";
			}
			footstepEffectTable = "impacteffect/footsteps/ai_arachnotron";
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 3000;
				decayRate = -300;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 0.75;
			}
			rearFootstepEffectTable = "impacteffect/footsteps/ai_arachnotron_rear";
			footstepEffectTable_Sprint = "impacteffect/footsteps/ai_arachnotron_sprint";
			rearFootstepEffectTable_Sprint = "impacteffect/footsteps/ai_arachnotron_rear_sprint";
			footstepEffectTable_SlowWalk = "impacteffect/footsteps/ai_arachnotron";
			rearFootstepEffectTable_SlowWalk = "impacteffect/footsteps/ai_arachnotron_rear";
			footstepEffectTable_CrouchWalk = "impacteffect/footsteps/ai_arachnotron";
			footstepEffectTable_Landing = "impacteffect/footsteps/ai_arachnotron_landing";
			footstepEffectTable_HeavyLanding = "impacteffect/footsteps/ai_arachnotron_landing";
			ledgeGrabEffectTable = "impacteffect/footsteps/ai_arachnotron";
			ledgeGrabEffectTable_Heavy = "impacteffect/footsteps/ai_arachnotron";
			ledgeGrabEffectTable_Friendly = "impacteffect/footsteps/ai_arachnotron";
			ledgeGrabEffectTable_FriendlyHeavy = "impacteffect/footsteps/ai_arachnotron";
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/arachnotron/base";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 1;
						item[0] = {
							damageGroupName = "left_upper_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 8;
				item[0] = "hips_part01_md";
				item[1] = "legfront_lowerbind_lf";
				item[2] = "legfront_lowerbind_rt";
				item[3] = "legback_lowerbind_lf";
				item[4] = "legback_lowerbind_rt";
				item[5] = "brain_part01_md";
				item[6] = "cannon_part01_md";
				item[7] = "turret_part01_md";
			}
		}
		factionName = "arachnotron";
		mass = 300;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/default_heavy";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_heavy_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/base";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/base";
					}
					ptr[7] = {
						componentDecl = "arachnotron";
					}
					ptr[9] = {
						componentDecl = "aicomponent/positionawareness/arachnotron/base";
					}
					ptr[10] = {
						componentDecl = "aicomponent/extendedsense/arachnotron/base";
					}
					ptr[21] = {
						componentDecl = "aicomponent/lasertargeter/arachnotron";
					}
					ptr[25] = {
						componentDecl = "aicomponent/arachnotron";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 2;
					item[0] = "syncmelee/arachnotron";
					item[1] = "syncmelee/arachnotron_3p";
				}
				syncGroups = {
					num = 1;
					item[0] = {
						syncGroupName = "";
						syncInteractions = {
							num = 12;
							item[0] = "syncdeath/playervsai/arachnotron/front_lower";
							item[1] = "syncdeath/playervsai/arachnotron/above_front";
							item[2] = "syncdeath/playervsai/arachnotron/back_upper";
							item[3] = "syncdeath/playervsai/arachnotron/right_upper";
							item[4] = "syncdeath/playervsai/arachnotron/left_upper";
							item[5] = "syncdeath/playervsai/arachnotron/above_back";
							item[6] = "syncdeath/playervsai/arachnotron/chainsaw/cut_front";
							item[7] = "syncdeath/playervsai/arachnotron/chainsaw/cut_back";
							item[8] = "syncdeath/playervsai/arachnotron/crucbile/crucible_front";
							item[9] = "syncdeath/playervsai/arachnotron/berserk/berserk_front_upper";
							item[10] = "syncdeath/playervsai/arachnotron/crucbile/crucible_back";
							item[11] = "syncdeath/playervsai/arachnotron/berserk/berserk_above_front";
						}
					}
				}
			}
			aiDeathCodex = "codex/hell/demon_arachnotron";
			positioningParms = {
				num = 5;
				item[0] = "arachnotron/default";
				item[1] = "arachnotron/default_hangout";
				item[2] = "arachnotron/evade";
				item[3] = "arachnotron/aggressive";
				item[4] = "arachnotron/default_failsafe";
			}
			defaultHitJoint = "head_part01_md";
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 75;
				obstaclePerceptionRadius = 78;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 39;
				senseUpdatesOnNonEnemies = false;
				fieldOfView = {
					value = 360;
				}
				fieldOfView_close = {
					value = 360;
				}
				exposedSightTime = 0;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = false;
				explosionDecl = "ai/default";
				declTwitchPain = "twitchpain/arachnotron";
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
			}
			cover = {
				coverRadius = 40;
				maxEnemyCoverDistance = 40;
			}
			behaviors = {
				decl = "behaviors/arachnotron/default";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/arachnotron";
			}
			vsAIDamageMask = "PAIN";
			spawnSettings = {
				entranceAnimPath = "animweb/characters/monsters/arachnotron/spawn/teleport_entrance";
				spawnFXEntityDef = "fx/spawn_in_heavy";
				teleportDelayMS = 1250;
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 3000;
					starting = 3000;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/heavy/arachnotron";
		}
		afProperties = {
			impactEffectTable = "impacteffect/ragdoll/ragdoll_metal";
			articulatedFigure = "characters/monsters/arachnatron";
			noImpulseDeathTime = {
				value = 1.5;
			}
		}
		renderModelInfo = {
			model = "md6def/characters/monsters/arachnotron/base/arachnotron.md6";
			lightRigDecl = "arachnotron/arachnotron_default";
		}
		killerNames = {
			num = 1;
			item[0] = "#str_decl_codex_hell_demons_arachnotron";
		}
		fxDecl = "character/arachnotron/arachnotron";
		startingInventory = {
			num = 8;
			item[0] = {
				startSlot = "EQUIPPED";
				showHolstered = false;
				inventoryDecl = "weapon/ai/arachnotron/pulse_cannon";
			}
			item[1] = {
				count = 10000;
				inventoryDecl = "ammo/ai/arachnotron/cannon_pulse_round";
			}
			item[2] = {
				inventoryDecl = "weapon/ai/arachnotron/beam_shot";
			}
			item[3] = {
				inventoryDecl = "ammo/ai/arachnotron/beam_shot";
			}
			item[4] = {
				inventoryDecl = "weapon/ai/arachnotron/pulse_cannon_rapid_fire";
			}
			item[5] = {
				inventoryDecl = "weapon/ai/arachnotron/pulse_cannon_hangout";
			}
			item[6] = {
				inventoryDecl = "weapon/ai/arachnotron/big_shot";
			}
			item[7] = {
				inventoryDecl = "ammo/ai/arachnotron/big_shot_round";
			}
		}
		spawnPosition = {
			x = -158.5;
			y = -283;
			z = -18;
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_heavy_cacodemon {
	inherit = "ai/heavy/cacodemon";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 2.55299997;
				y = 2.09599996;
				z = 3;
			}
			offset = {
				z = -1.5;
			}
			ignoreUnfixCollisionOffsetBug = true;
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "characters/cacodemon";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 1.63800001;
				}
				crouchedEyeOffset = {
					z = 0.610000014;
				}
			}
			actorSounds = {
				sndFootsteps = "footsteps/zombies/zombies_default";
				sndPainSmall = "player/pain/small";
				sndPainMedium = "player/pain/medium";
				sndPainLarge = "player/pain/large";
			}
			footstepEffectTable = NULL;
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 2500;
				decayRate = -250;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 0.75;
			}
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/cacodemon/base";
			}
			injuredStates = {
				num = 2;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 1;
						item[0] = {
							damageGroupName = "body";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
				item[1] = {
					name = "injured/eyeball";
					nodeSuffix = "_to_injured_eyeball";
					damageGroupMaxGoreLevels = {
						num = 1;
						item[0] = {
							damageGroupName = "head";
							maxGoreLevel = "GORELEVEL_HEAVY_DAMAGE";
						}
					}
					classicDeathSuppressionFlags = "SSF_MISC_BEHAVIOR";
					shouldDie = true;
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 13;
				item[0] = "jaw_part02_tp";
				item[1] = "jawb_part02_lf";
				item[2] = "jawb_part02_rt";
				item[3] = "arm_clavicle_lf";
				item[4] = "arm_clavicle_rt";
				item[5] = "arm_hand_lf";
				item[6] = "arm_hand_rt";
				item[7] = "armback_hand_lf";
				item[8] = "armback_hand_rt";
				item[9] = "headsec_part01_md";
				item[10] = "organs_part01_lf";
				item[11] = "organs_part01_rt";
				item[12] = "eye_result_md";
			}
		}
		factionName = "cacodemon";
		mass = 18.1439991;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/default_heavy";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_heavy_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/cacodemon";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/base";
					}
					ptr[18] = {
						componentDecl = "aicomponent/cacodemon";
					}
					ptr[23] = {
						componentDecl = "aicomponent/flight/cacodemon";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 2;
					item[0] = "syncmelee/cacodemon";
					item[1] = "syncmelee/cacodemon_3p";
				}
				syncGroups = {
					num = 1;
					item[0] = {
						syncGroupName = "";
						syncInteractions = {
							num = 9;
							item[0] = "syncdeath/playervsai/cacodemon/front_lower";
							item[1] = "syncdeath/playervsai/cacodemon/chainsaw/cut_back";
							item[2] = "syncdeath/playervsai/cacodemon/chainsaw/cut_front";
							item[3] = "syncdeath/playervsai/cacodemon/back_upper";
							item[4] = "syncdeath/playervsai/cacodemon/right_upper";
							item[5] = "syncdeath/playervsai/cacodemon/left_upper";
							item[6] = "syncdeath/playervsai/cacodemon/crucbile/crucible_front";
							item[7] = "syncdeath/playervsai/cacodemon/crucbile/crucible_back";
							item[8] = "syncdeath/playervsai/cacodemon/berserk/berserk_front_upper";
						}
					}
				}
			}
			aiDeathStat = "STAT_CACODEMON_KILLED";
			aiDeathCodex = "codex/hell/demon_cacodemon";
			defaultHitJoint = "hips_part01_md";
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 75;
				obstaclePerceptionRadius = 78;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 39;
				senseUpdatesOnNonEnemies = false;
				fieldOfView = {
					value = 360;
				}
				fieldOfView_close = {
					value = 360;
				}
				exposedSightTime = 0;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = false;
				explosionDecl = "ai/default";
				declTwitchPain = "twitchpain/cacodemon";
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
				preferredCombatWalkState = "WALKSTATE_WALKING";
			}
			cover = {
				coverRadius = 0;
			}
			behaviors = {
				decl = "behaviors/cacodemon/default";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/cacodemon";
			}
			vsAIDamageMask = "PAIN";
			ambient = {
				sndAmbient = "play_caco_idle_loop";
				sndAmbientEnd = "stop_caco_idle_loop";
			}
			spawnSettings = {
				entranceAnimPath = "animweb/characters/monsters/cacodemon/spawn/teleport_entrance";
				spawnFXEntityDef = "fx/spawn_in_meatball";
				teleportDelayMS = 1250;
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 2500;
					starting = 2500;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/heavy/cacodemon";
		}
		afProperties = {
			impactEffectTable = "impacteffect/ragdoll/ragdoll_meatball";
			articulatedFigure = "characters/monsters/cacodemon";
		}
		renderModelInfo = {
			model = "md6def/characters/monsters/cacodemon/base/cacodemon.md6";
			lightRigDecl = "cacodemon/cacodemon_default";
		}
		killerNames = {
			num = 1;
			item[0] = "#str_decl_codex_hell_demons_cacodemon";
		}
		fxDecl = "character/cacodemon/cacodemon";
		walkIK = {
			enabled = false;
		}
		spawnPosition = {
			x = -158;
			y = -277;
			z = -16.5;
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_ambient_zombie_cueball {
	inherit = "ai/ambient/zombie_cueball";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 0.400000006;
				y = 0.400000006;
				z = 1.5;
			}
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "characters/zombie";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 1.63829994;
				}
				crouchedEyeOffset = {
					z = 0.609600008;
				}
			}
			actorSounds = {
				sndFootsteps = "footsteps/zombies/zombies_default";
				sndPainSmall = "player/pain/small";
				sndPainMedium = "player/pain/medium";
				sndPainLarge = "player/pain/large";
				sndRagdollStart = "play_zombie_death";
			}
			footstepEffectTable = "impacteffect/footsteps/ai_zombie";
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 100;
				decayRate = 0;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 1;
			}
			footstepEffectTable_Sprint = "impacteffect/footsteps/ai_zombie_sprint";
			footstepEffectTable_SlowWalk = "impacteffect/footsteps/ai_zombie";
			footstepEffectTable_CrouchWalk = "impacteffect/footsteps/ai_zombie";
			footstepEffectTable_Landing = "impacteffect/footsteps/ai_zombie_landing";
			footstepEffectTable_HeavyLanding = "impacteffect/footsteps/ai_zombie_landing";
			ledgeGrabEffectTable = "impacteffect/footsteps/ai_zombie";
			ledgeGrabEffectTable_Heavy = "impacteffect/footsteps/ai_zombie";
			ledgeGrabEffectTable_Friendly = "impacteffect/footsteps/ai_zombie";
			ledgeGrabEffectTable_FriendlyHeavy = "impacteffect/footsteps/ai_zombie";
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/zombie/base";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 1;
						item[0] = {
							damageGroupName = "left_upper_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 6;
				item[0] = "head_part01_md";
				item[1] = "spine_part01_md";
				item[2] = "arm_hand_lf";
				item[3] = "arm_hand_rt";
				item[4] = "leg_lower_lf";
				item[5] = "leg_lower_rt";
			}
		}
		factionName = "cueball";
		mass = 18.1439991;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/default_fodder";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_fodder_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/zombie";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/base";
					}
					ptr[20] = {
						componentDecl = "aicomponent/jetpack/cueball";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 2;
					item[0] = "syncmelee/zombie_tier1";
					item[1] = "syncmelee/zombie_tier1_3p";
				}
				syncGroups = {
					num = 1;
					item[0] = {
						syncGroupName = "";
						syncInteractions = {
							num = 16;
							item[0] = "syncdeath/playervsai/zombie_tier1/front_head";
							item[1] = "syncdeath/playervsai/zombie_tier1/back_lower";
							item[2] = "syncdeath/playervsai/zombie_tier1/above_back";
							item[3] = "syncdeath/playervsai/zombie_tier1/above_front";
							item[4] = "syncdeath/playervsai/zombie_tier1/back_head";
							item[5] = "syncdeath/playervsai/zombie_tier1/front_chest";
							item[6] = "syncdeath/playervsai/zombie_tier1/front_lower";
							item[7] = "syncdeath/playervsai/zombie_tier1/front_rightarm";
							item[8] = "syncdeath/playervsai/zombie_tier1/left_lower";
							item[9] = "syncdeath/playervsai/zombie_tier1/right_lower";
							item[10] = "syncdeath/playervsai/zombie_tier1/right_upper";
							item[11] = "syncdeath/playervsai/zombie_tier1/back_upper";
							item[12] = "syncdeath/playervsai/zombie_tier1/chainsaw/cut_front";
							item[13] = "syncdeath/playervsai/zombie_tier1/left_upper";
							item[14] = "syncdeath/playervsai/zombie_tier1/chainsaw/cut_front";
							item[15] = "syncdeath/playervsai/zombie_tier1/front_leftarm";
						}
					}
				}
			}
			aiDeathStat = "STAT_ZOMBIE_KILLED";
			aiDeathCodex = "codex/hell/demon_cueball";
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 75;
				obstaclePerceptionRadius = 39;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 14;
				senseUpdatesOnNonEnemies = false;
				fieldOfView = {
					value = 360;
				}
				fieldOfView_close = {
					value = 360;
				}
				exposedSightTime = 0;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = true;
				explosionDecl = "ai/cueball/full_body";
				declTwitchPain = "twitchpain/zombie_t1";
			}
			movement = {
				wanderRadius = 3;
				useTraversalClassA = true;
				preferredCombatWalkState = "WALKSTATE_WALKING";
				allowWander = true;
			}
			cover = {
				coverRadius = 0;
			}
			behaviors = {
				decl = "behaviors/zombie/cueball";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/zombie_tier_1";
			}
			vsAIDamageMask = "PAIN";
			spawnSettings = {
				entranceAnimPath = "animweb/characters/monsters/zombie_tier_1/spawn/teleport_entrance";
				spawnFXEntityDef = "fx/spawn_in_fodder";
				teleportDelayMS = 750;
			}
			ambient = {
				sndAmbient = "play_zombie_cueball_idle";
				sndAmbientEnd = "stop_zombie_cueball_idle";
			}
			tempMemoryData = {
				num = 1;
				item[0] = {
					key = "zombie_cueball";
					value = 1;
				}
			}
			difficultySettings = {
				animRateScale = 0.666000009;
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 25;
					starting = 25;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/fodder/zombie_cueball";
		}
		afProperties = {
			impactEffectTable = "impacteffect/ragdoll/ragdoll_fodder";
			articulatedFigure = "characters/monsters/zombie_cueball";
		}
		renderModelInfo = {
			model = "md6def/characters/monsters/zombie_cueball/base/zombie_cueball.md6";
			lightRigDecl = "zombie_cueball/zombie_cueball_default";
		}
		fxDecl = "character/zombie_cueball/zombie_cueball";
		walkIKDecl = "walkik/zombie";
		killerNames = {
			num = 1;
			item[0] = "#str_decl_codex_hell_demons_cueball";
		}
		spawnPosition = {
			x = -148.199997;
			y = -287.000122;
			z = -17.0000057;
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_fodder_zombie_t1_scientist {
	inherit = "ai/fodder/zombie_t1_scientist";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 0.400000006;
				y = 0.400000006;
				z = 1.5;
			}
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "characters/zombie";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 1.63829994;
				}
				crouchedEyeOffset = {
					z = 0.609600008;
				}
			}
			actorSounds = {
				sndFootsteps = "footsteps/zombies/zombies_default";
				sndPainSmall = "player/pain/small";
				sndPainMedium = "player/pain/medium";
				sndPainLarge = "player/pain/large";
				sndRagdollStart = "play_zombie_death";
			}
			footstepEffectTable = "impacteffect/footsteps/ai_zombie";
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 200;
				decayRate = 0;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 1;
			}
			footstepEffectTable_Sprint = "impacteffect/footsteps/ai_zombie_sprint";
			footstepEffectTable_SlowWalk = "impacteffect/footsteps/ai_zombie";
			footstepEffectTable_CrouchWalk = "impacteffect/footsteps/ai_zombie";
			footstepEffectTable_Landing = "impacteffect/footsteps/ai_zombie_landing";
			footstepEffectTable_HeavyLanding = "impacteffect/footsteps/ai_zombie_landing";
			ledgeGrabEffectTable = "impacteffect/footsteps/ai_zombie";
			ledgeGrabEffectTable_Heavy = "impacteffect/footsteps/ai_zombie";
			ledgeGrabEffectTable_Friendly = "impacteffect/footsteps/ai_zombie";
			ledgeGrabEffectTable_FriendlyHeavy = "impacteffect/footsteps/ai_zombie";
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/zombie/base";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 1;
						item[0] = {
							damageGroupName = "left_upper_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 6;
				item[0] = "head_part01_md";
				item[1] = "spine_part01_md";
				item[2] = "arm_hand_lf";
				item[3] = "arm_hand_rt";
				item[4] = "leg_lower_lf";
				item[5] = "leg_lower_rt";
			}
		}
		factionName = "zombie_t1";
		mass = 18.1439991;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/default_fodder";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_fodder_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/zombie";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/base";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 2;
					item[0] = "syncmelee/zombie_tier1_scientist";
					item[1] = "syncmelee/zombie_tier1_3p";
				}
				syncGroups = {
					num = 1;
					item[0] = {
						syncGroupName = "";
						syncInteractions = {
							num = 21;
							item[0] = "syncdeath/playervsai/zombie_tier1/front_head";
							item[1] = "syncdeath/playervsai/zombie_tier1/back_lower";
							item[2] = "syncdeath/playervsai/zombie_tier1/above_back";
							item[3] = "syncdeath/playervsai/zombie_tier1/above_front";
							item[4] = "syncdeath/playervsai/zombie_tier1/back_head";
							item[5] = "syncdeath/playervsai/zombie_tier1/front_chest";
							item[6] = "syncdeath/playervsai/zombie_tier1/front_leftarm";
							item[7] = "syncdeath/playervsai/zombie_tier1/front_lower";
							item[8] = "syncdeath/playervsai/zombie_tier1/front_rightarm";
							item[9] = "syncdeath/playervsai/zombie_tier1/left_lower";
							item[10] = "syncdeath/playervsai/zombie_tier1/left_upper";
							item[11] = "syncdeath/playervsai/zombie_tier1/right_lower";
							item[12] = "syncdeath/playervsai/zombie_tier1/right_upper";
							item[13] = "syncdeath/playervsai/zombie_tier1/back_upper";
							item[14] = "syncdeath/playervsai/zombie_tier1/chainsaw/cut_front";
							item[15] = "syncdeath/playervsai/zombie_tier1/chainsaw/cut_back";
							item[16] = "syncdeath/playervsai/zombie_tier3/front_rightarm";
							item[17] = "syncdeath/playervsai/zombie_tier1/berserk/berserk_front_upper";
							item[18] = "syncdeath/playervsai/zombie_tier1/berserk/berserk_above_front";
							item[19] = "syncdeath/playervsai/zombie_tier1/crucbile/crucible_front";
							item[20] = "syncdeath/playervsai/zombie_tier1/crucbile/crucible_back";
						}
					}
				}
			}
			aiDeathStat = "STAT_ZOMBIE_KILLED";
			aiDeathCodex = "codex/hell/demon_zombie_cultist";
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 75;
				obstaclePerceptionRadius = 39;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 14;
				senseUpdatesOnNonEnemies = false;
				fieldOfView = {
					value = 360;
				}
				fieldOfView_close = {
					value = 360;
				}
				exposedSightTime = 0;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = true;
				explosionDecl = NULL;
				declTwitchPain = "twitchpain/zombie_t1";
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
				preferredCombatWalkState = "WALKSTATE_WALKING";
			}
			cover = {
				coverRadius = 0;
			}
			behaviors = {
				decl = "behaviors/zombie/tier_1";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/zombie_tier_1";
			}
			vsAIDamageMask = "PAIN";
			spawnSettings = {
				entranceAnimPath = "animweb/characters/monsters/zombie_tier_1/spawn/teleport_entrance";
				spawnFXEntityDef = "fx/spawn_in_fodder";
				teleportDelayMS = 750;
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 200;
					starting = 200;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/fodder/zombie_tier1_scientist";
		}
		afProperties = {
			impactEffectTable = "impacteffect/ragdoll/ragdoll_fodder";
			articulatedFigure = "characters/monsters/zombie_tier1";
		}
		renderModelInfo = {
			model = "md6def/characters/monsters/zombie_tier1/base/zombie_tier1_scientist.md6";
			lightRigDecl = "zombie_tier1/zombie_tier1_default";
		}
		fxDecl = "character/zombie_tier1/zombie_tier1";
		walkIKDecl = "walkik/zombie";
		killerNames = {
			num = 1;
			item[0] = "#str_decl_damage_zombie_GHOST81206";
		}
		spawnPosition = {
			x = -154.5;
			y = -276.5;
			z = -16;
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_heavy_mancubus_fire {
	inherit = "ai/heavy/mancubus_fire";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 1.39999998;
				y = 1.39999998;
				z = 2.20000005;
			}
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "characters/mancubus";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 1.71500003;
				}
				crouchedEyeOffset = {
					z = 1.06700003;
				}
			}
			actorSounds = {
				sndFootsteps = "play_md6_editor_footstep";
			}
			footstepEffectTable = "impacteffect/footsteps/ai_mancubus";
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 3500;
				decayRate = -350;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 0.75;
			}
			footstepEffectTable_Sprint = "impacteffect/footsteps/ai_mancubus_sprint";
			footstepEffectTable_SlowWalk = "impacteffect/footsteps/ai_mancubus";
			footstepEffectTable_CrouchWalk = "impacteffect/footsteps/ai_mancubus";
			footstepEffectTable_Landing = "impacteffect/footsteps/ai_mancubus_landing";
			footstepEffectTable_HeavyLanding = "impacteffect/footsteps/ai_mancubus_landing";
			ledgeGrabEffectTable = "impacteffect/footsteps/ai_mancubus";
			ledgeGrabEffectTable_Heavy = "impacteffect/footsteps/ai_mancubus";
			ledgeGrabEffectTable_Friendly = "impacteffect/footsteps/ai_mancubus";
			ledgeGrabEffectTable_FriendlyHeavy = "impacteffect/footsteps/ai_mancubus";
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/mancubus_fire/base";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 1;
						item[0] = {
							damageGroupName = "chestplate";
							maxGoreLevel = "GORELEVEL_DISMEMBERED";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 8;
				item[0] = "head_part01_md";
				item[1] = "spine_part01_md";
				item[2] = "arm_hand_lf";
				item[3] = "arm_hand_rt";
				item[4] = "leg_lower_lf";
				item[5] = "leg_lower_rt";
				item[6] = "arm_lower_lf";
				item[7] = "arm_lower_rt";
			}
		}
		factionName = "manc_fire";
		mass = 136.080002;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/default_heavy";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_heavy_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/base";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/base";
					}
					ptr[9] = {
						componentDecl = "aicomponent/positionawareness/mancubus_fire/base";
					}
					ptr[10] = {
						componentDecl = "aicomponent/extendedsense/soldier_blaster/base";
					}
					ptr[11] = {
						componentDecl = "aicomponent/transientfocus/soldier_blaster/base";
					}
					ptr[15] = {
						componentDecl = "aicomponent/waveblast/manc_fire/fart";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 2;
					item[0] = "syncmelee/mancubus_fire";
					item[1] = "syncmelee/mancubus_fire_3p";
				}
				syncGroups = {
					num = 1;
					item[0] = {
						syncGroupName = "";
						syncInteractions = {
							num = 13;
							item[0] = "syncdeath/playervsai/mancubus_fire/front_head";
							item[1] = "syncdeath/playervsai/mancubus_fire/front_upper";
							item[2] = "syncdeath/playervsai/mancubus_fire/chainsaw/cut_front";
							item[3] = "syncdeath/playervsai/mancubus_fire/chainsaw/cut_back";
							item[4] = "syncdeath/playervsai/mancubus_fire/back_upper";
							item[5] = "syncdeath/playervsai/mancubus_fire/left_upper";
							item[6] = "syncdeath/playervsai/mancubus_fire/right_upper";
							item[7] = "syncdeath/playervsai/mancubus_fire/above_back";
							item[8] = "syncdeath/playervsai/mancubus_fire/crucbile/crucible_front";
							item[9] = "syncdeath/playervsai/mancubus_fire/crucbile/crucible_back";
							item[10] = "syncdeath/playervsai/mancubus_fire/berserk/berserk_front_upper";
							item[11] = "syncdeath/playervsai/mancubus_fire/berserk/berserk_above_front";
							item[12] = "syncdeath/playervsai/mancubus_fire/above_front";
						}
					}
				}
			}
			aiDeathStat = "STAT_MANCUBUS_KILLED";
			positioningParms = {
				num = 1;
				item[0] = "mancubus_fire/default";
			}
			aiDeathCodex = "codex/hell/demon_mancubus_fire";
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 75;
				obstaclePerceptionRadius = 78;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 39;
				senseUpdatesOnNonEnemies = false;
				fieldOfView = {
					value = 360;
				}
				fieldOfView_close = {
					value = 360;
				}
				exposedSightTime = 0;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = false;
				explosionDecl = "ai/default";
				useArmorSurfTypeOnDG = true;
				declTwitchPain = "twitchpain/mancubus_fire";
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
				preferredCombatWalkState = "WALKSTATE_WALKING";
			}
			cover = {
				coverRadius = 40;
			}
			behaviors = {
				decl = "behaviors/mancubus_fire/default";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/mancubus_fire";
			}
			vsAIDamageMask = "PAIN";
			spawnSettings = {
				entranceAnimPath = "animweb/characters/monsters/mancubus_fire/spawn/teleport_entrance";
				spawnFXEntityDef = "fx/spawn_in_heavy";
				teleportDelayMS = 1250;
			}
			difficultySettings = {
				animRateScale = 1.5;
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 3500;
					starting = 3500;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/heavy/mancubus_fire";
		}
		afProperties = {
			impactEffectTable = "impacteffect/ragdoll/ragdoll_metal_heavy";
			articulatedFigure = "characters/monsters/mancubus_auto";
		}
		renderModelInfo = {
			model = "md6def/characters/monsters/mancubus_fire/base/mancubus_fire.md6";
			showHideMeshInfo = {
				bodyKit = "Base";
			}
			lightRigDecl = "mancubus_fire/mancubus_fire_default";
		}
		startingInventory = {
			num = 1;
			item[0] = {
				startSlot = "HOLSTERED";
				showHolstered = false;
				inventoryDecl = "ammo/ai/mancubus/mortar";
			}
		}
		walkIKDecl = "walkik/biped_base";
		killerNames = {
			num = 1;
			item[0] = "#str_decl_codex_hell_demons_mancubus_fire";
		}
		fxDecl = "character/mancubus_fire/mancubus_fire";
		spawnPosition = {
			x = -155.29982;
			y = -287.500092;
			z = -18.5000076;
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_ambient_tentacle {
	inherit = "ai/ambient/tentacle";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 0.600000024;
				y = 0.600000024;
				z = 1.829;
			}
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "default";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 1.71500003;
				}
				crouchedEyeOffset = {
					z = 1.06700003;
				}
			}
			actorSounds = {
				sndFootsteps = "play_md6_editor_footstep";
			}
			footstepEffectTable = "impacteffect/footsteps/ai_walk_s";
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 150;
				decayRate = 0;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 0.75;
			}
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/tentacle/default";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 1;
						item[0] = {
							damageGroupName = "left_upper_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 5;
				item[0] = "tentaclesec_part01_md";
				item[1] = "tentaclesec_part03_md";
				item[2] = "tentaclesec_part05_md";
				item[3] = "tentaclesec_part09_md";
				item[4] = "tentaclesec_part13_md";
			}
		}
		factionName = "tentacle";
		mass = 18.1439991;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/ambient/tentacle";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/base";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/base";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 2;
					item[0] = "syncmelee/tentacle";
					item[1] = "syncmelee/tentacle_3p";
				}
				syncGroups = {
					num = 1;
					item[0] = {
						syncGroupName = "";
						syncInteractions = {
							num = 2;
							item[0] = "syncdeath/playervsai/tentacle/chainsaw/cut_front";
							item[1] = "syncdeath/playervsai/tentacle/crucbile/crucible_front";
						}
					}
				}
			}
			aiDeathCodex = "codex/hell/demon_tentacle";
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 75;
				obstaclePerceptionRadius = 78;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 39;
				senseUpdatesOnNonEnemies = false;
				fieldOfView = {
					value = 360;
				}
				fieldOfView_close = {
					value = 360;
				}
				exposedSightTime = 0;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = false;
				explosionDecl = "ai/default";
				declTwitchPain = "twitchpain/tentacle";
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
			}
			cover = {
				coverRadius = 0;
			}
			behaviors = {
				decl = "behaviors/tentacle/default";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/tentacle";
			}
			vsAIDamageMask = "PAIN";
			ambient = {
				sndAmbient = "play_tentacle_idle_loop";
			}
			spawnSettings = {
				timers_setOnSpawn = {
					num = 1;
					item[0] = {
						name = "spawn";
					}
				}
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 150;
					starting = 150;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/ambient/tentacle";
		}
		renderModelInfo = {
			model = "md6def/characters/ambient/tentacle/base/tentacle.md6";
			lightRigDecl = "tentacle/tentacle_default";
		}
		killerNames = {
			num = 1;
			item[0] = "#str_decl_codex_hell_demons_tentacle";
		}
		fxDecl = "character/tentacle/tentacle";
		spawnPosition = {
			x = -154.100006;
			y = -282.300018;
			z = -18;
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_fodder_carcass {
	inherit = "ai/fodder/carcass";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 0.600000024;
				y = 0.600000024;
				z = 1.829;
			}
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "default";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 1.71500003;
				}
				crouchedEyeOffset = {
					z = 1.06700003;
				}
			}
			actorSounds = {
				sndFootsteps = "play_md6_editor_footstep";
			}
			footstepEffectTable = "impacteffect/footsteps/ai_carcass";
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 1200;
				decayRate = -60;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 0.75;
			}
			rearFootstepEffectTable = "impacteffect/footsteps/ai_carcass";
			footstepEffectTable_Sprint = "impacteffect/footsteps/ai_carcass_sprint";
			rearFootstepEffectTable_Sprint = "impacteffect/footsteps/ai_carcass_sprint";
			footstepEffectTable_SlowWalk = "impacteffect/footsteps/ai_carcass";
			rearFootstepEffectTable_SlowWalk = "impacteffect/footsteps/ai_carcass";
			footstepEffectTable_CrouchWalk = "impacteffect/footsteps/ai_carcass";
			footstepEffectTable_Landing = "impacteffect/footsteps/ai_carcass_landing";
			footstepEffectTable_HeavyLanding = "impacteffect/footsteps/ai_carcass_landing";
			ledgeGrabEffectTable = "impacteffect/footsteps/ai_carcass";
			ledgeGrabEffectTable_Heavy = "impacteffect/footsteps/ai_carcass";
			ledgeGrabEffectTable_Friendly = "impacteffect/footsteps/ai_carcass";
			ledgeGrabEffectTable_FriendlyHeavy = "impacteffect/footsteps/ai_carcass";
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/carcass/default";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 1;
						item[0] = {
							damageGroupName = "left_upper_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 7;
				item[0] = "head_part01_md";
				item[1] = "spine_part0_md";
				item[2] = "arm_handbind_lf";
				item[3] = "arm_handbind_rt";
				item[4] = "leg_lowerbind_lf";
				item[5] = "leg_lowerbind_rt";
				item[6] = "leg_lowerbind_md";
			}
		}
		factionName = "carcass";
		mass = 18.1439991;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/default_heavy";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_heavy_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/base";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/base";
					}
					ptr[7] = {
						componentDecl = "carcass";
					}
					ptr[9] = {
						componentDecl = "aicomponent/positionawareness/carcass/base";
					}
					ptr[13] = {
						componentDecl = "aicomponent/carcass";
					}
					ptr[15] = {
						componentDecl = "aicomponent/waveblast/carcass/furrows";
					}
					ptr[20] = {
						componentDecl = "aicomponent/jetpack/carcass";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 2;
					item[0] = "syncmelee/carcass";
					item[1] = "syncmelee/carcass_3p";
				}
				syncGroups = {
					num = 1;
					item[0] = {
						syncGroupName = "";
						syncInteractions = {
							num = 19;
							item[0] = "syncdeath/playervsai/carcass/front_head";
							item[1] = "syncdeath/playervsai/carcass/right_upper";
							item[2] = "syncdeath/playervsai/carcass/left_lower";
							item[3] = "syncdeath/playervsai/carcass/front_chest";
							item[4] = "syncdeath/playervsai/carcass/back_upper";
							item[5] = "syncdeath/playervsai/carcass/front_lower";
							item[6] = "syncdeath/playervsai/carcass/left_upper";
							item[7] = "syncdeath/playervsai/carcass/back_lower";
							item[8] = "syncdeath/playervsai/carcass/front_rightarm";
							item[9] = "syncdeath/playervsai/carcass/right_lower";
							item[10] = "syncdeath/playervsai/carcass/above_front";
							item[11] = "syncdeath/playervsai/carcass/front_leftarm";
							item[12] = "syncdeath/playervsai/carcass/berserk/berserk_above_front";
							item[13] = "syncdeath/playervsai/carcass/chainsaw/cut_front";
							item[14] = "syncdeath/playervsai/carcass/chainsaw/cut_back";
							item[15] = "syncdeath/playervsai/carcass/crucbile/crucible_front";
							item[16] = "syncdeath/playervsai/carcass/berserk/berserk_front_upper";
							item[17] = "syncdeath/playervsai/carcass/crucbile/crucible_back";
							item[18] = "syncdeath/playervsai/carcass/above_back";
						}
					}
				}
			}
			aiDeathCodex = "codex/hell/demon_carcass";
			positioningParms = {
				num = 1;
				item[0] = "carcass/default";
			}
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 75;
				obstaclePerceptionRadius = 78;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 39;
				senseUpdatesOnNonEnemies = false;
				fieldOfView = {
					value = 360;
				}
				fieldOfView_close = {
					value = 360;
				}
				exposedSightTime = 0;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = false;
				explosionDecl = NULL;
				declTwitchPain = "twitchpain/carcass";
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
			}
			cover = {
				coverRadius = 40;
				maxEnemyCoverDistance = 40;
			}
			behaviors = {
				decl = "behaviors/carcass/default";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/carcass";
			}
			vsAIDamageMask = "PAIN";
			spawnSettings = {
				entranceAnimPath = "animweb/characters/monsters/carcass/spawn/teleport_entrance";
				spawnFXEntityDef = "fx/spawn_in_fodder";
				teleportDelayMS = 750;
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 1200;
					starting = 1200;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/fodder/carcass";
		}
		afProperties = {
			impactEffectTable = "impacteffect/ragdoll/ragdoll_fodder";
			articulatedFigure = "characters/monsters/carcass";
		}
		renderModelInfo = {
			model = "md6def/characters/monsters/carcass/base/carcass.md6";
			lightRigDecl = "carcass/carcass_default";
		}
		killerNames = {
			num = 1;
			item[0] = "#str_decl_codex_hell_demons_carcass";
		}
		fxDecl = "character/carcass/carcass";
		spawnPosition = {
			x = -6.70000315;
			y = 181.34996;
			z = -2921.30005;
		}
		flags = {
			hide = true;
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_fodder_prowler {
	inherit = "ai/fodder/prowler";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 0.600000024;
				y = 0.600000024;
				z = 1.829;
			}
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "characters/prowler";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 1.71500003;
				}
				crouchedEyeOffset = {
					z = 1.06700003;
				}
			}
			actorSounds = {
				sndFootsteps = "footsteps/imp/fs_imp_concrete";
			}
			footstepEffectTable = "impacteffect/footsteps/ai_prowler";
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 1000;
				decayRate = -50;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 0.75;
			}
			footstepEffectTable_Sprint = "impacteffect/footsteps/ai_prowler_sprint";
			footstepEffectTable_SlowWalk = "impacteffect/footsteps/ai_prowler";
			footstepEffectTable_CrouchWalk = "impacteffect/footsteps/ai_prowler";
			footstepEffectTable_Landing = "impacteffect/footsteps/ai_prowler_landing";
			footstepEffectTable_HeavyLanding = "impacteffect/footsteps/ai_prowler_landing";
			ledgeGrabEffectTable = "impacteffect/footsteps/ai_imp";
			ledgeGrabEffectTable_Heavy = "impacteffect/footsteps/ai_imp";
			ledgeGrabEffectTable_Friendly = "impacteffect/footsteps/ai_imp";
			ledgeGrabEffectTable_FriendlyHeavy = "impacteffect/footsteps/ai_imp";
			aimAssistData = {
				meleeTargetHeadOnly = true;
			}
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/prowler/base";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 1;
						item[0] = {
							damageGroupName = "left_upper_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 6;
				item[0] = "head_part01_md";
				item[1] = "spine_part0_md";
				item[2] = "arm_handbind_lf";
				item[3] = "arm_handbind_rt";
				item[4] = "leg_lowerbind_lf";
				item[5] = "leg_lowerbind_rt";
			}
		}
		factionName = "prowler";
		mass = 18.1439991;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/default_heavy";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_heavy_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/prowler";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/base";
					}
					ptr[9] = {
						componentDecl = "aicomponent/positionawareness/prowler/base";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 2;
					item[0] = "syncmelee/prowler";
					item[1] = "syncmelee/prowler_3p";
				}
				syncGroups = {
					num = 1;
					item[0] = {
						syncGroupName = "";
						syncInteractions = {
							num = 19;
							item[0] = "syncdeath/playervsai/prowler/front_rightarm";
							item[1] = "syncdeath/playervsai/prowler/front_head";
							item[2] = "syncdeath/playervsai/prowler/right_upper";
							item[3] = "syncdeath/playervsai/prowler/front_lower";
							item[4] = "syncdeath/playervsai/prowler/front_leftarm";
							item[5] = "syncdeath/playervsai/prowler/left_lower";
							item[6] = "syncdeath/playervsai/prowler/left_upper";
							item[7] = "syncdeath/playervsai/prowler/above_front";
							item[8] = "syncdeath/playervsai/prowler/above_back";
							item[9] = "syncdeath/playervsai/prowler/right_lower";
							item[10] = "syncdeath/playervsai/prowler/back_lower";
							item[11] = "syncdeath/playervsai/prowler/back_upper";
							item[12] = "syncdeath/playervsai/prowler/chainsaw/cut_front";
							item[13] = "syncdeath/playervsai/prowler/chainsaw/cut_back";
							item[14] = "syncdeath/playervsai/prowler/berserk/berserk_above_front";
							item[15] = "syncdeath/playervsai/prowler/berserk/berserk_front_upper";
							item[16] = "syncdeath/playervsai/prowler/crucbile/crucible_front";
							item[17] = "syncdeath/playervsai/prowler/crucbile/crucible_back";
							item[18] = "syncdeath/playervsai/prowler/front_chest";
						}
					}
				}
			}
			aiDeathStat = "STAT_IMP_KILLED";
			aiDeathCodex = "codex/hell/demon_prowler";
			positioningParms = {
				num = 1;
				item[0] = "prowler/default";
			}
			defaultHitJoint = "spine_part1_md";
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 75;
				obstaclePerceptionRadius = 78;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 39;
				senseUpdatesOnNonEnemies = false;
				fieldOfView = {
					value = 360;
				}
				fieldOfView_close = {
					value = 360;
				}
				exposedSightTime = 0;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = false;
				explosionDecl = "ai/default";
				declTwitchPain = "twitchpain/prowler";
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
			}
			cover = {
				coverRadius = 39.0140038;
				maxEnemyCoverDistance = 39.0140038;
			}
			behaviors = {
				decl = "behaviors/prowler/default";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/prowler";
			}
			vsAIDamageMask = "PAIN";
			spawnSettings = {
				entranceAnimPath = "animweb/characters/monsters/prowler/spawn/teleport_entrance";
				spawnFXEntityDef = "fx/spawn_in_fodder";
				teleportDelayMS = 750;
			}
			freeze = {
				damageThreshold = 2;
				freezeTime = 8;
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 1000;
					starting = 1000;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/fodder/prowler";
		}
		afProperties = {
			impactEffectTable = "impacteffect/ragdoll/ragdoll_fodder";
			articulatedFigure = "characters/monsters/prowler";
		}
		renderModelInfo = {
			model = "md6def/characters/monsters/prowler/base/prowler.md6";
			lightRigDecl = "prowler/prowler_default";
		}
		killerNames = {
			num = 1;
			item[0] = "#str_decl_codex_hell_demons_prowler";
		}
		fxDecl = "character/prowler/prowler";
		startingInventory = {
			num = 4;
			item[0] = {
				startSlot = "HOLSTERED";
				inventoryDecl = "weapon/ai/prowler/shadow_bolt_single";
			}
			item[1] = {
				inventoryDecl = "ammo/ai/prowler/shadow_bolt_single";
			}
			item[2] = {
				inventoryDecl = "weapon/ai/prowler/shadow_bolt_multi";
			}
			item[3] = {
				inventoryDecl = "ammo/ai/prowler/shadow_bolt_multi";
			}
		}
		spawnPosition = {
			x = 2.29999733;
			y = 181.34996;
			z = -2921.30005;
		}
		flags = {
			hide = true;
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_heavy_dreadknight {
	inherit = "ai/heavy/dreadknight";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 0.699999988;
				y = 0.699999988;
				z = 2.0999999;
			}
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "characters/dreadknight";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 1.71500003;
				}
				crouchedEyeOffset = {
					z = 1.06700003;
				}
			}
			actorSounds = {
				sndFootsteps = "play_md6_editor_footstep";
			}
			footstepEffectTable = "impacteffect/footsteps/ai_dreadknight";
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 3000;
				decayRate = -300;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 0.75;
			}
			footstepEffectTable_Sprint = "impacteffect/footsteps/ai_dreadknight_sprint";
			footstepEffectTable_SlowWalk = "impacteffect/footsteps/ai_dreadknight";
			footstepEffectTable_CrouchWalk = "impacteffect/footsteps/ai_dreadknight";
			footstepEffectTable_Landing = "impacteffect/footsteps/ai_dreadknight_landing";
			footstepEffectTable_HeavyLanding = "impacteffect/footsteps/ai_dreadknight_landing";
			ledgeGrabEffectTable = "impacteffect/footsteps/ai_dreadknight";
			ledgeGrabEffectTable_Heavy = "impacteffect/footsteps/ai_dreadknight";
			ledgeGrabEffectTable_Friendly = "impacteffect/footsteps/ai_dreadknight";
			ledgeGrabEffectTable_FriendlyHeavy = "impacteffect/footsteps/ai_dreadknight";
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/dreadknight/base";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 1;
						item[0] = {
							damageGroupName = "left_upper_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 6;
				item[0] = "head_part01_md";
				item[1] = "spine_part01_md";
				item[2] = "arm_hand_lf";
				item[3] = "arm_hand_rt";
				item[4] = "leg_lower_lf";
				item[5] = "leg_lower_rt";
			}
		}
		factionName = "dread_knight";
		mass = 18.1439991;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/default_heavy";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_heavy_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/dreadknight";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/dreadknight";
					}
					ptr[6] = {
						componentDecl = "aicomponent/dreadknight";
					}
					ptr[9] = {
						componentDecl = "aicomponent/positionawareness/dreadknight/base";
					}
					ptr[11] = {
						componentDecl = "aicomponent/transientfocus/demon/dreadknight_default";
					}
					ptr[15] = {
						componentDecl = "aicomponent/waveblast/dreadknight/ground_pound";
					}
					ptr[24] = {
						componentDecl = "aicomponent/scythe/dreadknight";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 2;
					item[0] = "syncmelee/dreadknight";
					item[1] = "syncmelee/dreadknight_3p";
				}
				syncGroups = {
					num = 1;
					item[0] = {
						syncGroupName = "";
						syncInteractions = {
							num = 12;
							item[0] = "syncdeath/playervsai/dreadknight/right_upper";
							item[1] = "syncdeath/playervsai/dreadknight/front_upper";
							item[2] = "syncdeath/playervsai/dreadknight/above_back";
							item[3] = "syncdeath/playervsai/dreadknight/berserk/berserk_above_front";
							item[4] = "syncdeath/playervsai/dreadknight/above_front";
							item[5] = "syncdeath/playervsai/dreadknight/left_upper";
							item[6] = "syncdeath/playervsai/dreadknight/chainsaw/cut_front";
							item[7] = "syncdeath/playervsai/dreadknight/back_upper";
							item[8] = "syncdeath/playervsai/dreadknight/chainsaw/cut_back";
							item[9] = "syncdeath/playervsai/dreadknight/crucbile/crucible_front";
							item[10] = "syncdeath/playervsai/dreadknight/crucbile/crucible_back";
							item[11] = "syncdeath/playervsai/dreadknight/berserk/berserk_front_upper";
						}
					}
				}
			}
			aiDeathCodex = "codex/hell/demon_dreadknight";
			positioningParms = {
				num = 2;
				item[0] = "dreadknight/default";
				item[1] = "dreadknight/ranged";
			}
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 75;
				obstaclePerceptionRadius = 78;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 39;
				senseUpdatesOnNonEnemies = false;
				fieldOfView = {
					value = 360;
				}
				fieldOfView_close = {
					value = 360;
				}
				exposedSightTime = 0;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = false;
				explosionDecl = "ai/default";
				declTwitchPain = "twitchpain/dreadknight";
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
				preferredCombatWalkState = "WALKSTATE_SPRINTING";
			}
			cover = {
				coverRadius = 39.0140038;
				maxEnemyCoverDistance = 39.0140038;
			}
			behaviors = {
				decl = "behaviors/dreadknight/default";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/dreadknight";
			}
			vsAIDamageMask = "PAIN";
			spawnSettings = {
				entranceAnimPath = "animweb/characters/monsters/dreadknight/spawn/teleport_entrance";
				spawnFXEntityDef = "fx/spawn_in_heavy";
				teleportDelayMS = 1250;
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 3000;
					starting = 3000;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/heavy/dreadknight";
		}
		afProperties = {
			impactEffectTable = "impacteffect/ragdoll/ragdoll_heavy";
			articulatedFigure = "characters/monsters/dreadknight";
		}
		renderModelInfo = {
			model = "md6def/characters/monsters/dreadknight/base/dreadknight.md6";
			lightRigDecl = "dreadnight/dreadnight_default";
		}
		killerNames = {
			num = 1;
			item[0] = "#str_decl_codex_hell_demons_dreadknight";
		}
		fxDecl = "character/dreadknight/dreadknight";
		startingInventory = {
			num = 2;
			item[0] = {
				startSlot = "HOLSTERED";
				showHolstered = false;
				inventoryDecl = "weapon/ai/imp/fireball";
			}
			item[1] = {
				inventoryDecl = "weapon/ai/imp/fireball";
			}
		}
		walkIKDecl = "walkik/dreadknight";
		spawnPosition = {
			x = -5.20000267;
			y = 172.84996;
			z = -2921.30005;
		}
		flags = {
			hide = true;
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_heavy_mancubus_goo {
	inherit = "ai/heavy/mancubus_goo";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 1.39999998;
				y = 1.39999998;
				z = 2.20000005;
			}
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "characters/mancubus_goo";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 1.71500003;
				}
				crouchedEyeOffset = {
					z = 1.06700003;
				}
			}
			actorSounds = {
				sndFootsteps = "play_md6_editor_footstep";
			}
			footstepEffectTable = "impacteffect/footsteps/ai_mancubus_goo";
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 6000;
				decayRate = -600;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 0.75;
			}
			footstepEffectTable_Sprint = "impacteffect/footsteps/ai_mancubus_goo";
			footstepEffectTable_SlowWalk = "impacteffect/footsteps/ai_mancubus_goo";
			footstepEffectTable_CrouchWalk = "impacteffect/footsteps/ai_mancubus_goo";
			footstepEffectTable_Landing = "impacteffect/footsteps/ai_mancubus_goo";
			footstepEffectTable_HeavyLanding = "impacteffect/footsteps/ai_mancubus_goo";
			ledgeGrabEffectTable = "impacteffect/footsteps/ai_mancubus";
			ledgeGrabEffectTable_Heavy = "impacteffect/footsteps/ai_mancubus";
			ledgeGrabEffectTable_Friendly = "impacteffect/footsteps/ai_mancubus";
			ledgeGrabEffectTable_FriendlyHeavy = "impacteffect/footsteps/ai_mancubus";
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/mancubus_goo/base";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 1;
						item[0] = {
							damageGroupName = "chestplate";
							maxGoreLevel = "GORELEVEL_DISMEMBERED";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 8;
				item[0] = "head_part01_md";
				item[1] = "spine_part01_md";
				item[2] = "arm_hand_lf";
				item[3] = "arm_hand_rt";
				item[4] = "leg_lower_lf";
				item[5] = "leg_lower_rt";
				item[6] = "arm_lower_lf";
				item[7] = "arm_lower_rt";
			}
		}
		factionName = "manc_goo";
		mass = 136.080002;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/default_heavy";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_heavy_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/base";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/base";
					}
					ptr[9] = {
						componentDecl = "aicomponent/positionawareness/mancubus_goo/base";
					}
					ptr[10] = {
						componentDecl = "aicomponent/extendedsense/soldier_blaster/base";
					}
					ptr[11] = {
						componentDecl = "aicomponent/transientfocus/soldier_blaster/base";
					}
					ptr[15] = {
						componentDecl = "aicomponent/waveblast/manc_goo/fart";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 1;
					item[0] = "syncmelee/mancubus_goo";
				}
				syncGroups = {
					num = 1;
					item[0] = {
						syncGroupName = "";
						syncInteractions = {
							num = 13;
							item[0] = "syncdeath/playervsai/mancubus_fire/front_head";
							item[1] = "syncdeath/playervsai/mancubus_fire/front_upper";
							item[2] = "syncdeath/playervsai/mancubus_fire/chainsaw/cut_front";
							item[3] = "syncdeath/playervsai/mancubus_fire/chainsaw/cut_back";
							item[4] = "syncdeath/playervsai/mancubus_fire/back_upper";
							item[5] = "syncdeath/playervsai/mancubus_fire/left_upper";
							item[6] = "syncdeath/playervsai/mancubus_fire/right_upper";
							item[7] = "syncdeath/playervsai/mancubus_fire/above_back";
							item[8] = "syncdeath/playervsai/mancubus_fire/crucbile/crucible_front";
							item[9] = "syncdeath/playervsai/mancubus_fire/crucbile/crucible_back";
							item[10] = "syncdeath/playervsai/mancubus_fire/berserk/berserk_front_upper";
							item[11] = "syncdeath/playervsai/mancubus_fire/berserk/berserk_above_front";
							item[12] = "syncdeath/playervsai/mancubus_fire/above_front";
						}
					}
				}
			}
			aiDeathStat = "STAT_CYBER_MANCUBUS_KILLED";
			positioningParms = {
				num = 1;
				item[0] = "mancubus_goo/default";
			}
			aiDeathCodex = "codex/hell/demon_mancubus_cyber";
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 75;
				obstaclePerceptionRadius = 78;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 39;
				senseUpdatesOnNonEnemies = false;
				fieldOfView = {
					value = 360;
				}
				fieldOfView_close = {
					value = 360;
				}
				exposedSightTime = 0;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = false;
				explosionDecl = "ai/default";
				useArmorSurfTypeOnDG = true;
				declTwitchPain = "twitchpain/mancubus_fire";
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
				preferredCombatWalkState = "WALKSTATE_WALKING";
			}
			cover = {
				coverRadius = 40;
			}
			behaviors = {
				decl = "behaviors/mancubus_goo/default";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/mancubus_goo";
			}
			vsAIDamageMask = "PAIN";
			spawnSettings = {
				entranceAnimPath = "animweb/characters/monsters/mancubus_goo/spawn/teleport_entrance";
				spawnFXEntityDef = "fx/spawn_in_heavy";
				teleportDelayMS = 1250;
			}
			difficultySettings = {
				animRateScale = 1.5;
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 6000;
					starting = 6000;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/heavy/mancubus_goo";
		}
		afProperties = {
			impactEffectTable = "impacteffect/ragdoll/ragdoll_metal_heavy";
			articulatedFigure = "characters/monsters/mancubus_auto";
		}
		renderModelInfo = {
			model = "md6def/characters/monsters/mancubus_goo/base/mancubus_goo.md6";
			showHideMeshInfo = {
				bodyKit = "Goo";
			}
			lightRigDecl = "mancubus_cyber/mancubus_cyber_default";
			materialRemap = {
				num = 5;
				item[0] = {
					from = "models/monsters/mancubus_goo/mancubus_guns";
					to = "models/monsters/mancubus_goo/mancubus_guns_green";
				}
				item[1] = {
					from = "models/monsters/mancubus_goo/mancubus_body";
					to = "models/monsters/mancubus_goo/mancubus_body_green";
				}
				item[2] = {
					from = "models/monsters/mancubus_goo/mancubus_head";
					to = "models/monsters/mancubus_goo/mancubus_head_green";
				}
				item[3] = {
					from = "models/monsters/mancubus_goo/mancubus_heart";
					to = "models/monsters/mancubus_goo/mancubus_heart_green";
				}
				item[4] = {
					from = "models/monsters/mancubus_goo/mancubus_legs";
					to = "models/monsters/mancubus_goo/mancubus_legs_green";
				}
			}
		}
		startingInventory = {
			num = 1;
			item[0] = {
				startSlot = "HOLSTERED";
				showHolstered = false;
				inventoryDecl = "ammo/ai/mancubus/mortar";
			}
		}
		walkIKDecl = "walkik/biped_base";
		killerNames = {
			num = 1;
			item[0] = "#str_decl_codex_hell_demons_mancubus_cyber";
		}
		fxDecl = "character/mancubus_goo/mancubus_goo";
		spawnPosition = {
			x = 1.29999745;
			y = 172.84996;
			z = -2921.30005;
		}
		flags = {
			hide = true;
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_heavy_painelemental {
	inherit = "ai/heavy/painelemental";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 2;
				y = 2;
				z = 2.79999995;
			}
			offset = {
				z = -1.39999998;
			}
			ignoreUnfixCollisionOffsetBug = true;
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "characters/pain_elemental";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 0;
				}
				crouchedEyeOffset = {
					z = 0;
				}
			}
			actorSounds = {
				sndFootsteps = "footsteps/zombies/zombies_default";
				sndPainSmall = "player/pain/small";
				sndPainMedium = "player/pain/medium";
				sndPainLarge = "player/pain/large";
			}
			footstepEffectTable = NULL;
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 5000;
				decayRate = -500;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 0.75;
			}
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/painelemental/base";
			}
			injuredStates = {
				num = 2;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 1;
						item[0] = {
							damageGroupName = "body";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
				item[1] = {
					name = "injured/eyeball";
					nodeSuffix = "_to_injured_eyeball";
					damageGroupMaxGoreLevels = {
						num = 1;
						item[0] = {
							damageGroupName = "eye";
							maxGoreLevel = "GORELEVEL_HEAVY_DAMAGE";
						}
					}
					classicDeathSuppressionFlags = "SSF_MISC_BEHAVIOR";
					shouldDie = true;
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 19;
				item[0] = "horn_part03_lf";
				item[1] = "horn_part03_rt";
				item[2] = "jaw_part03_tp";
				item[3] = "head_part01_md";
				item[4] = "arm_lowerroll2_lf";
				item[5] = "arm_lowerroll2_rt";
				item[6] = "jawc_part04_lf";
				item[7] = "jawc_part04_rt";
				item[8] = "jawd_part02_lf";
				item[9] = "jawd_part02_rt";
				item[10] = "jawb_part03_lf";
				item[11] = "jawb_part03_rt";
				item[12] = "jawa_part02_lf";
				item[13] = "jawa_part02_rt";
				item[14] = "arm_upperroll2_lf";
				item[15] = "arm_upperroll2_rt";
				item[16] = "brow_part01_lf";
				item[17] = "brow_part01_rt";
				item[18] = "jaw_part01_bd";
			}
		}
		factionName = "pain_elemental";
		mass = 18.1439991;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/default_heavy";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_heavy_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/painelemental";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/base";
					}
					ptr[13] = {
						componentDecl = "aicomponent/pain_elemental";
					}
					ptr[23] = {
						componentDecl = "aicomponent/flight/painelemental";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 2;
					item[0] = "syncmelee/painelemental";
					item[1] = "syncmelee/painelemental_3p";
				}
				syncGroups = {
					num = 1;
					item[0] = {
						syncGroupName = "";
						syncInteractions = {
							num = 11;
							item[0] = "syncdeath/playervsai/painelemental/front_lower";
							item[1] = "syncdeath/playervsai/painelemental/left_lower";
							item[2] = "syncdeath/playervsai/painelemental/right_lower";
							item[3] = "syncdeath/playervsai/painelemental/back_lower";
							item[4] = "syncdeath/playervsai/painelemental/above_back";
							item[5] = "syncdeath/playervsai/painelemental/above_front";
							item[6] = "syncdeath/playervsai/painelemental/chainsaw/cut_back";
							item[7] = "syncdeath/playervsai/painelemental/berserk/berserk_front_upper";
							item[8] = "syncdeath/playervsai/painelemental/chainsaw/cut_front";
							item[9] = "syncdeath/playervsai/painelemental/crucbile/crucible_front";
							item[10] = "syncdeath/playervsai/painelemental/crucbile/crucible_back";
						}
					}
				}
			}
			aiDeathStat = "STAT_CACODEMON_KILLED";
			aiDeathCodex = "codex/hell/demon_painelemental";
			defaultHitJoint = "hips_part01_md";
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 75;
				obstaclePerceptionRadius = 78;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 39;
				senseUpdatesOnNonEnemies = false;
				fieldOfView = {
					value = 360;
				}
				fieldOfView_close = {
					value = 360;
				}
				exposedSightTime = 0;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 0.5;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = true;
				explosionDecl = "ai/default";
				declTwitchPain = "twitchpain/painelemental";
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
				preferredCombatWalkState = "WALKSTATE_WALKING";
			}
			cover = {
				coverRadius = 0;
			}
			behaviors = {
				decl = "behaviors/painelemental/default";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/painelemental";
			}
			vsAIDamageMask = "PAIN";
			spawnSettings = {
				entranceAnimPath = "animweb/characters/monsters/painelemental/spawn/teleport_entrance";
				spawnFXEntityDef = "fx/spawn_in_meatball";
				teleportDelayMS = 1250;
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 5000;
					starting = 5000;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/heavy/painelemental";
		}
		afProperties = {
			impactEffectTable = "impacteffect/ragdoll/ragdoll_meatball";
			articulatedFigure = "characters/monsters/painelemental";
		}
		renderModelInfo = {
			model = "md6def/characters/monsters/painelemental/base/painelemental.md6";
			lightRigDecl = "painelemental/painelemental_default";
			customSkinIndex = 0;
		}
		killerNames = {
			num = 1;
			item[0] = "#str_decl_codex_hell_demons_painelemental";
		}
		fxDecl = "character/pain_elemental/pain_elemental";
		walkIK = {
			enabled = false;
		}
		spawnPosition = {
			x = 4.29999781;
			y = 172.84996;
			z = -2921.30005;
		}
		flags = {
			hide = true;
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_heavy_pinky {
	inherit = "ai/heavy/pinky";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 0.899999976;
				y = 0.899999976;
				z = 1.829;
			}
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "characters/pinky";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 2.43799996;
				}
				crouchedEyeOffset = {
					z = 2.43799996;
				}
			}
			actorSounds = {
				sndFootsteps = "play_pinky_footstep_base";
				sndPainSmall = "player/pain/small";
				sndPainMedium = "player/pain/medium";
				sndPainLarge = "player/pain/large";
			}
			footstepEffectTable = "impacteffect/footsteps/ai_pinky";
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 1000;
				decayRate = -200;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 0.75;
			}
			footstepEffectTable_Sprint = "impacteffect/footsteps/ai_pinky_charging";
			footstepEffectTable_SlowWalk = "impacteffect/footsteps/ai_pinky";
			footstepEffectTable_CrouchWalk = "impacteffect/footsteps/ai_pinky_landing";
			footstepEffectTable_Landing = "impacteffect/footsteps/ai_pinky_landing";
			footstepEffectTable_HeavyLanding = "impacteffect/footsteps/ai_pinky_landing";
			ledgeGrabEffectTable = "impacteffect/footsteps/ai_pinky";
			ledgeGrabEffectTable_Heavy = "impacteffect/footsteps/ai_pinky";
			ledgeGrabEffectTable_Friendly = "impacteffect/footsteps/ai_pinky";
			ledgeGrabEffectTable_FriendlyHeavy = "impacteffect/footsteps/ai_pinky";
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/pinky/base";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 1;
						item[0] = {
							damageGroupName = "body";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 9;
				item[0] = "jaw";
				item[1] = "spine2";
				item[2] = "rightforearm";
				item[3] = "leftforearm";
				item[4] = "rightleg";
				item[5] = "leftleg";
				item[6] = "tail1";
				item[7] = "tail3";
				item[8] = "tail5";
			}
		}
		factionName = "pinky";
		mass = 18.1439991;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/default_heavy";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_heavy_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/pinky";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/base";
					}
					ptr[9] = {
						componentDecl = "aicomponent/positionawareness/pinky/base";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 2;
					item[0] = "syncmelee/pinky";
					item[1] = "syncmelee/pinky_3p";
				}
				syncGroups = {
					num = 1;
					item[0] = {
						syncGroupName = "";
						syncInteractions = {
							num = 12;
							item[0] = "syncdeath/playervsai/pinky/above_back";
							item[1] = "syncdeath/playervsai/pinky/above_front";
							item[2] = "syncdeath/playervsai/pinky/back_upper";
							item[3] = "syncdeath/playervsai/pinky/front_upper";
							item[4] = "syncdeath/playervsai/pinky/left_upper";
							item[5] = "syncdeath/playervsai/pinky/right_upper";
							item[6] = "syncdeath/playervsai/pinky/chainsaw/cut_front";
							item[7] = "syncdeath/playervsai/pinky/chainsaw/cut_back";
							item[8] = "syncdeath/playervsai/pinky/crucbile/crucible_front";
							item[9] = "syncdeath/playervsai/pinky/crucbile/crucible_back";
							item[10] = "syncdeath/playervsai/pinky/berserk/berserk_front_upper";
							item[11] = "syncdeath/playervsai/pinky/berserk/berserk_above_front";
						}
					}
				}
			}
			aiDeathStat = "STAT_PINKY_KILLED";
			positioningParms = {
				num = 1;
				item[0] = "pinky/default";
			}
			defaultHitJoint = "tail1";
			aiDeathCodex = "codex/hell/demon_pinky";
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 75;
				obstaclePerceptionRadius = 78;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 39;
				senseUpdatesOnNonEnemies = false;
				fieldOfView = {
					value = 360;
				}
				fieldOfView_close = {
					value = 360;
				}
				exposedSightTime = 0;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = false;
				explosionDecl = "ai/default";
				declTwitchPain = "twitchpain/pinky";
				useArmorSurfTypeOnDG = true;
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
				preferredCombatWalkState = "WALKSTATE_WALKING";
			}
			cover = {
				coverRadius = 0;
			}
			behaviors = {
				decl = "behaviors/pinky/default";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/pinky";
			}
			vsAIDamageMask = "PAIN";
			spawnSettings = {
				entranceAnimPath = "animweb/characters/monsters/pinky/spawn/teleport_entrance";
				spawnFXEntityDef = "fx/spawn_in_heavy";
				teleportDelayMS = 1250;
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 500;
					starting = 500;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/heavy/pinky";
		}
		afProperties = {
			impactEffectTable = "impacteffect/ragdoll/ragdoll_heavy";
			articulatedFigure = "characters/monsters/pinky_auto";
		}
		renderModelInfo = {
			model = "md6def/characters/monsters/pinky/base/pinky.md6";
			lightRigDecl = "pinky/pinky_default";
		}
		fxDecl = "character/pinky/pinky";
		walkIKDecl = "walkik/biped_base";
		killerNames = {
			num = 1;
			item[0] = "#str_decl_codex_hell_demons_pinky";
		}
		spawnPosition = {
			x = 7.79999685;
			y = 172.34996;
			z = -2921.30005;
		}
		flags = {
			hide = true;
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_heavy_pinky_spectre {
	inherit = "ai/heavy/pinky_spectre";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 0.899999976;
				y = 0.899999976;
				z = 1.829;
			}
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "characters/pinky_spectre";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 2.43799996;
				}
				crouchedEyeOffset = {
					z = 2.43799996;
				}
			}
			actorSounds = {
				sndFootsteps = "play_pinky_footstep_base";
				sndPainSmall = "player/pain/small";
				sndPainMedium = "player/pain/medium";
				sndPainLarge = "player/pain/large";
			}
			footstepEffectTable = "impacteffect/footsteps/ai_pinky";
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 2000;
				decayRate = -200;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 0.75;
			}
			footstepEffectTable_Sprint = "impacteffect/footsteps/ai_pinky_charging";
			footstepEffectTable_SlowWalk = "impacteffect/footsteps/ai_pinky";
			footstepEffectTable_CrouchWalk = "impacteffect/footsteps/ai_pinky_landing";
			footstepEffectTable_Landing = "impacteffect/footsteps/ai_pinky_landing";
			footstepEffectTable_HeavyLanding = "impacteffect/footsteps/ai_pinky_landing";
			ledgeGrabEffectTable = "impacteffect/footsteps/ai_pinky";
			ledgeGrabEffectTable_Heavy = "impacteffect/footsteps/ai_pinky";
			ledgeGrabEffectTable_Friendly = "impacteffect/footsteps/ai_pinky";
			ledgeGrabEffectTable_FriendlyHeavy = "impacteffect/footsteps/ai_pinky";
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/pinky/spectre";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 1;
						item[0] = {
							damageGroupName = "body";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 9;
				item[0] = "jaw";
				item[1] = "spine2";
				item[2] = "rightforearm";
				item[3] = "leftforearm";
				item[4] = "rightleg";
				item[5] = "leftleg";
				item[6] = "tail1";
				item[7] = "tail3";
				item[8] = "tail5";
			}
		}
		factionName = "spectre";
		mass = 18.1439991;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/default_heavy";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_heavy_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/pinky";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/base";
					}
					ptr[9] = {
						componentDecl = "aicomponent/positionawareness/pinky/base";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 2;
					item[0] = "syncmelee/pinky";
					item[1] = "syncmelee/pinky_3p";
				}
				syncGroups = {
					num = 1;
					item[0] = {
						syncGroupName = "";
						syncInteractions = {
							num = 12;
							item[0] = "syncdeath/playervsai/pinky/above_back";
							item[1] = "syncdeath/playervsai/pinky/above_front";
							item[2] = "syncdeath/playervsai/pinky/back_upper";
							item[3] = "syncdeath/playervsai/pinky/front_upper";
							item[4] = "syncdeath/playervsai/pinky/left_upper";
							item[5] = "syncdeath/playervsai/pinky/right_upper";
							item[6] = "syncdeath/playervsai/pinky/chainsaw/cut_front";
							item[7] = "syncdeath/playervsai/pinky/chainsaw/cut_back";
							item[8] = "syncdeath/playervsai/pinky/crucbile/crucible_front";
							item[9] = "syncdeath/playervsai/pinky/crucbile/crucible_back";
							item[10] = "syncdeath/playervsai/pinky/berserk/berserk_front_upper";
							item[11] = "syncdeath/playervsai/pinky/berserk/berserk_above_front";
						}
					}
				}
			}
			aiDeathStat = "STAT_SPECTRE_KILLED";
			positioningParms = {
				num = 1;
				item[0] = "pinky/default";
			}
			defaultHitJoint = "tail1";
			aiDeathCodex = "codex/hell/demon_pinky_spectre";
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 75;
				obstaclePerceptionRadius = 78;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 39;
				senseUpdatesOnNonEnemies = false;
				fieldOfView = {
					value = 360;
				}
				fieldOfView_close = {
					value = 360;
				}
				exposedSightTime = 0;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = false;
				explosionDecl = "ai/default";
				declTwitchPain = "twitchpain/pinky";
				useArmorSurfTypeOnDG = false;
				defaultArmorType = "SURFTYPE_AI_REINFORCEDHIDEARMOR";
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
				preferredCombatWalkState = "WALKSTATE_WALKING";
			}
			cover = {
				coverRadius = 0;
			}
			behaviors = {
				decl = "behaviors/pinky/spectre";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/pinky";
			}
			vsAIDamageMask = "PAIN";
			spawnSettings = {
				entranceAnimPath = "animweb/characters/monsters/pinky/hands_combat/idle";
				spawnFXEntityDef = NULL;
				teleportDelayMS = 0;
				chanceMissingArmor = {
					num = 1;
					item[0] = {
						damageGroup = "head";
						missingChance = 100;
					}
				}
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 2000;
					starting = 2000;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/heavy/pinky";
		}
		afProperties = {
			impactEffectTable = "impacteffect/ragdoll/ragdoll_heavy";
			articulatedFigure = "characters/monsters/pinky_auto";
		}
		renderModelInfo = {
			model = "md6def/characters/monsters/pinky/base/spectre.md6";
		}
		fxDecl = "character/pinky/spectre";
		walkIKDecl = "walkik/biped_base";
		killerNames = {
			num = 1;
			item[0] = "#str_decl_codex_hell_demons_pinky_spectre";
		}
		spawnPosition = {
			x = 10.7999973;
			y = 172.34996;
			z = -2921.30005;
		}
		flags = {
			hide = true;
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_superheavy_archvile {
	inherit = "ai/superheavy/archvile";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 0.600000024;
				y = 0.600000024;
				z = 1.829;
			}
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "default";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 1.71500003;
				}
				crouchedEyeOffset = {
					z = 1.06700003;
				}
			}
			actorSounds = {
				sndFootsteps = "play_md6_editor_footstep";
			}
			footstepEffectTable = "impacteffect/footsteps/ai_archvile";
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 6000;
				decayRate = -900;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 0.75;
			}
			footstepEffectTable_Sprint = "impacteffect/footsteps/ai_archvile_sprint";
			footstepEffectTable_SlowWalk = "impacteffect/footsteps/ai_archvile";
			footstepEffectTable_CrouchWalk = "impacteffect/footsteps/ai_archvile";
			footstepEffectTable_Landing = "impacteffect/footsteps/ai_archvile_landing";
			footstepEffectTable_HeavyLanding = "impacteffect/footsteps/ai_archvile_landing";
			ledgeGrabEffectTable = "impacteffect/footsteps/ai_archvile";
			ledgeGrabEffectTable_Heavy = "impacteffect/footsteps/ai_archvile";
			ledgeGrabEffectTable_Friendly = "impacteffect/footsteps/ai_archvile";
			ledgeGrabEffectTable_FriendlyHeavy = "impacteffect/footsteps/ai_archvile";
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/archvile/base";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 1;
						item[0] = {
							damageGroupName = "left_upper_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 10;
				item[0] = "head_part01_md";
				item[1] = "spine_part01_md";
				item[2] = "arm_hand_lf";
				item[3] = "arm_hand_rt";
				item[4] = "leg_lower_lf";
				item[5] = "leg_lower_rt";
				item[6] = "arm_lower_lf";
				item[7] = "arm_lower_rt";
				item[8] = "leg_foot_lf";
				item[9] = "leg_foot_rt";
			}
		}
		factionName = "archvile";
		mass = 18.1439991;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/default_superheavy";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_superheavy_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/archvile";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/base";
					}
					ptr[5] = {
						componentDecl = "aicomponent/archvile";
					}
					ptr[7] = {
						componentDecl = "archvile";
					}
					ptr[9] = {
						componentDecl = "aicomponent/positionawareness/archvile/base";
					}
					ptr[15] = {
						componentDecl = "aicomponent/waveblast/archvile/rolling_fire";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 2;
					item[0] = "syncmelee/archvile";
					item[1] = "syncmelee/archvile_3p";
				}
				syncGroups = {
					num = 1;
					item[0] = {
						syncGroupName = "";
						syncInteractions = {
							num = 10;
							item[0] = "syncdeath/playervsai/archvile/front_upper";
							item[1] = "syncdeath/playervsai/archvile/above_back";
							item[2] = "syncdeath/playervsai/archvile/berserk/berserk_above_front";
							item[3] = "syncdeath/playervsai/archvile/above_front";
							item[4] = "syncdeath/playervsai/archvile/crucbile/crucible_front";
							item[5] = "syncdeath/playervsai/archvile/left_upper";
							item[6] = "syncdeath/playervsai/archvile/crucbile/crucible_back";
							item[7] = "syncdeath/playervsai/archvile/berserk/berserk_front_upper";
							item[8] = "syncdeath/playervsai/archvile/back_upper";
							item[9] = "syncdeath/playervsai/archvile/right_upper";
						}
					}
				}
			}
			aiDeathCodex = "codex/hell/demon_archvile";
			positioningParms = {
				num = 1;
				item[0] = "archvile/default";
			}
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 75;
				obstaclePerceptionRadius = 78;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 39;
				senseUpdatesOnNonEnemies = false;
				fieldOfView = {
					value = 360;
				}
				fieldOfView_close = {
					value = 360;
				}
				exposedSightTime = 0;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = false;
				explosionDecl = "ai/default";
				declTwitchPain = "twitchpain/archvile";
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
			}
			cover = {
				coverRadius = 50;
			}
			behaviors = {
				decl = "behaviors/archvile/default";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/archvile";
			}
			vsAIDamageMask = "PAIN";
			spawnSettings = {
				entranceAnimPath = "animweb/characters/monsters/archvile/spawn/teleport_entrance";
				spawnFXEntityDef = "fx/spawn_in_superheavy";
				teleportDelayMS = 2000;
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 6000;
					starting = 6000;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/superheavy/archvile";
		}
		afProperties = {
			impactEffectTable = "impacteffect/ragdoll/ragdoll_super_heavy";
			articulatedFigure = "characters/monsters/archvile";
		}
		renderModelInfo = {
			model = "md6def/characters/monsters/archvile/base/archvile.md6";
			lightRigDecl = "archvile/archvile_default";
		}
		killerNames = {
			num = 1;
			item[0] = "#str_decl_codex_hell_demons_archvile";
		}
		fxDecl = "character/archvile/archvile";
		spawnPosition = {
			x = -5.20000267;
			y = 163.34996;
			z = -2921.30005;
		}
		flags = {
			hide = true;
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_superheavy_baron {
	inherit = "ai/superheavy/baron";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 1;
				y = 1;
				z = 2.70000005;
			}
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "characters/baron";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 1.71500003;
				}
				crouchedEyeOffset = {
					z = 1.06700003;
				}
			}
			actorSounds = {
				sndFootsteps = "play_md6_editor_footstep";
			}
			footstepEffectTable = "impacteffect/footsteps/ai_baron";
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 7000;
				decayRate = -1050;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 0.75;
			}
			footstepEffectTable_Sprint = "impacteffect/footsteps/ai_baron_sprint";
			footstepEffectTable_SlowWalk = "impacteffect/footsteps/ai_baron";
			footstepEffectTable_CrouchWalk = "impacteffect/footsteps/ai_baron_landing";
			footstepEffectTable_Landing = "impacteffect/footsteps/ai_baron_landing";
			footstepEffectTable_HeavyLanding = "impacteffect/footsteps/ai_baron_landing";
			footstepEffectTable_Friendly = "impacteffect/footsteps/ai_hellknight";
			footstepEffectTable_FriendlySprint = "impacteffect/footsteps/ai_hellknight";
			footstepEffectTable_FriendlySlowWalk = "impacteffect/footsteps/ai_hellknight";
			footstepEffectTable_FriendlyCrouchWalk = "impacteffect/footsteps/ai_hellknight";
			footstepEffectTable_FriendlyLanding = "impacteffect/footsteps/ai_hellknight";
			footstepEffectTable_FriendlyHeavyLanding = "impacteffect/footsteps/ai_hellknight";
			ledgeGrabEffectTable = "impacteffect/footsteps/ai_hellknight";
			ledgeGrabEffectTable_Heavy = "impacteffect/footsteps/ai_hellknight";
			ledgeGrabEffectTable_Friendly = "impacteffect/footsteps/ai_hellknight";
			ledgeGrabEffectTable_FriendlyHeavy = "impacteffect/footsteps/ai_hellknight";
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/baron/base";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 1;
						item[0] = {
							damageGroupName = "left_upper_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 10;
				item[0] = "head";
				item[1] = "spine2";
				item[2] = "lefthand";
				item[3] = "righthand";
				item[4] = "rightleg";
				item[5] = "leftleg";
				item[6] = "leftarm";
				item[7] = "rightarm";
				item[8] = "leftupleg";
				item[9] = "rightupleg";
			}
		}
		factionName = "baron";
		mass = 18.1439991;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/default_superheavy";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_superheavy_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/baron";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/baron";
					}
					ptr[6] = {
						componentDecl = "aicomponent/baron";
					}
					ptr[9] = {
						componentDecl = "aicomponent/positionawareness/baron/base";
					}
					ptr[11] = {
						componentDecl = "aicomponent/transientfocus/demon/hellknight_default";
					}
					ptr[15] = {
						componentDecl = "aicomponent/waveblast/baron/base";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 2;
					item[0] = "syncmelee/baron";
					item[1] = "syncmelee/baron_3p";
				}
				syncGroups = {
					num = 1;
					item[0] = {
						syncGroupName = "";
						syncInteractions = {
							num = 10;
							item[0] = "syncdeath/playervsai/baron/back_upper";
							item[1] = "syncdeath/playervsai/baron/above_front";
							item[2] = "syncdeath/playervsai/baron/above_back";
							item[3] = "syncdeath/playervsai/baron/front_upper";
							item[4] = "syncdeath/playervsai/baron/left_upper";
							item[5] = "syncdeath/playervsai/baron/right_upper";
							item[6] = "syncdeath/playervsai/baron/crucbile/crucible_front";
							item[7] = "syncdeath/playervsai/baron/berserk/berserk_front_upper";
							item[8] = "syncdeath/playervsai/baron/crucbile/crucible_back";
							item[9] = "syncdeath/playervsai/baron/berserk/berserk_above_front";
						}
					}
				}
			}
			aiDeathStat = "STAT_BARON_KILLED";
			aiDeathCodex = "codex/hell/demon_baronofhell";
			positioningParms = {
				num = 3;
				item[0] = "baron/default";
				item[1] = "baron/ranged";
				item[2] = "baron/ranged_unreachable";
			}
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 75;
				obstaclePerceptionRadius = 78;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 39;
				senseUpdatesOnNonEnemies = false;
				fieldOfView = {
					value = 360;
				}
				fieldOfView_close = {
					value = 360;
				}
				exposedSightTime = 0;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = false;
				explosionDecl = "ai/default";
				declTwitchPain = "twitchpain/baron";
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
			}
			cover = {
				coverRadius = 39.0140038;
				maxEnemyCoverDistance = 39.0140038;
			}
			behaviors = {
				decl = "behaviors/baron/default";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/baron";
			}
			vsAIDamageMask = "PAIN";
			ambient = {
				sndAmbient = "play_baron_idle_flame";
				sndAmbientEnd = "stop_baron_idle_flame";
			}
			spawnSettings = {
				entranceAnimPath = "animweb/characters/monsters/baron/spawn/teleport_entrance";
				spawnFXEntityDef = "fx/spawn_in_superheavy";
				teleportDelayMS = 2000;
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 7000;
					starting = 7000;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/superheavy/baron";
		}
		afProperties = {
			impactEffectTable = "impacteffect/ragdoll/ragdoll_super_heavy";
			articulatedFigure = "characters/monsters/baron_auto";
		}
		renderModelInfo = {
			model = "md6def/characters/monsters/baron/base/baron.md6";
			lightRigDecl = "baron/baron_default";
		}
		killerNames = {
			num = 1;
			item[0] = "#str_decl_codex_hell_demons_baronofhell";
		}
		fxDecl = "character/baron/baron";
		walkIKDecl = "walkik/hellknight";
		spawnPosition = {
			x = -2.20000267;
			y = 163.34996;
			z = -2921.30005;
		}
		flags = {
			hide = true;
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_superheavy_doom_hunter {
	inherit = "ai/superheavy/doom_hunter";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 1.5;
				y = 1.5;
				z = 4;
			}
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "characters/doomhunter";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 1.71500003;
				}
				crouchedEyeOffset = {
					z = 1.06700003;
				}
			}
			actorSounds = {
				sndFootsteps = "play_md6_editor_footstep";
			}
			footstepEffectTable = "impacteffect/footsteps/ai_walk_s";
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 8000;
				decayRate = -1200;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 0.75;
			}
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/doomhunter/base";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 1;
						item[0] = {
							damageGroupName = "left_upper_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 6;
				item[0] = "head_part01_md";
				item[1] = "spine_part01_md";
				item[2] = "arm_hand_lf";
				item[3] = "arm_hand_rt";
				item[4] = "arm_lower_lf";
				item[5] = "arm_lower_rt";
			}
			radiusDamageHitTestGroups = {
				num = 2;
				item[0] = "left_sled";
				item[1] = "right_sled";
			}
		}
		factionName = "doom_hunter";
		mass = 18.1439991;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/default_superheavy";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_superheavy_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/doomhunter";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/doomhunter";
					}
					ptr[9] = {
						componentDecl = "aicomponent/positionawareness/doomhunter/base";
					}
					ptr[10] = {
						componentDecl = "aicomponent/extendedsense/doom_hunter/base";
					}
					ptr[15] = {
						componentDecl = "aicomponent/waveblast/doomhunter/heat_sink";
					}
					ptr[29] = {
						componentDecl = "aicomponent/sled/doom_hunter";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 2;
					item[0] = "syncmelee/doomhunter";
					item[1] = "syncmelee/doomhunter_3p";
				}
				syncGroups = {
					num = 1;
					item[0] = {
						syncGroupName = "";
						syncInteractions = {
							num = 10;
							item[0] = "syncdeath/playervsai/doomhunter/front_upper";
							item[1] = "syncdeath/playervsai/doomhunter/berserk/berserk_above_front";
							item[2] = "syncdeath/playervsai/doomhunter/above_front";
							item[3] = "syncdeath/playervsai/doomhunter/above_back";
							item[4] = "syncdeath/playervsai/doomhunter/berserk/berserk_front_upper";
							item[5] = "syncdeath/playervsai/doomhunter/crucbile/crucible_front";
							item[6] = "syncdeath/playervsai/doomhunter/crucbile/crucible_back";
							item[7] = "syncdeath/playervsai/doomhunter/left_upper";
							item[8] = "syncdeath/playervsai/doomhunter/back_upper";
							item[9] = "syncdeath/playervsai/doomhunter/right_upper";
						}
					}
				}
			}
			aiDeathCodex = "codex/hell/doom_hunter";
			positioningParms = {
				num = 2;
				item[0] = "doomhunter/default";
				item[1] = "doomhunter/hangback";
			}
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 39;
				obstaclePerceptionRadius = 78;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 39;
				senseUpdatesOnNonEnemies = false;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = false;
				explosionDecl = "ai/default";
				declTwitchPain = "twitchpain/doomhunter";
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
			}
			cover = {
				coverRadius = 39.0140038;
				maxEnemyCoverDistance = 39.0140038;
			}
			behaviors = {
				decl = "behaviors/doomhunter/default";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/doomhunter";
			}
			vsAIDamageMask = "PAIN";
			ambient = {
				sndAmbient = "play_doomhunter_engineloop";
				sndAmbientEnd = "stop_doomhunter_engineloop";
			}
			spawnSettings = {
				entranceAnimPath = "animweb/characters/monsters/doomhunter/spawn/teleport_entrance";
				spawnFXEntityDef = "fx/spawn_in_superheavy";
				teleportDelayMS = 2000;
				initialState = "AIOVERRIDE_TELEPORT";
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 7500;
					starting = 7500;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/superheavy/doomhunter";
		}
		afProperties = {
			impactEffectTable = "impacteffect/ragdoll/ragdoll_super_heavy";
			articulatedFigure = "characters/monsters/doomhunter";
		}
		renderModelInfo = {
			model = "md6def/characters/monsters/doomhunter/base/doomhunter.md6";
			lightRigDecl = "doomhunter/doomhunter_default";
		}
		killerNames = {
			num = 1;
			item[0] = "#str_decl_damage_doom_hunter_GHOST81200";
		}
		fxDecl = "character/doom_hunter/doom_hunter";
		startingInventory = {
			num = 5;
			item[0] = {
				startSlot = "EQUIPPED";
				showHolstered = false;
				inventoryDecl = "weapon/ai/doom_hunter/railgun";
			}
			item[1] = {
				startSlot = "EQUIPPED";
				showHolstered = false;
				inventoryDecl = "weapon/ai/doom_hunter/rocket_barrage_left";
			}
			item[2] = {
				startSlot = "EQUIPPED";
				showHolstered = false;
				inventoryDecl = "weapon/ai/doom_hunter/rocket_barrage_right";
			}
			item[3] = {
				startSlot = "EQUIPPED";
				showHolstered = false;
				inventoryDecl = "weapon/ai/doom_hunter/gatling_gun_left";
			}
			item[4] = {
				startSlot = "EQUIPPED";
				inventoryDecl = "weapon/ai/doom_hunter/gatling_gun_right";
			}
		}
		spawnPosition = {
			x = -1692.90027;
			y = -344;
			z = -164;
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_superheavy_marauder {
	inherit = "ai/superheavy/marauder";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 0.600000024;
				y = 0.600000024;
				z = 1.829;
			}
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "default";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 1.71500003;
				}
				crouchedEyeOffset = {
					z = 1.06700003;
				}
			}
			actorSounds = {
				sndFootsteps = "play_md6_editor_footstep";
			}
			footstepEffectTable = "impacteffect/footsteps/ai_marauder";
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 5000;
				decayRate = -750;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 0.75;
			}
			footstepEffectTable_Sprint = "impacteffect/footsteps/ai_marauder_sprint";
			footstepEffectTable_SlowWalk = "impacteffect/footsteps/ai_marauder";
			footstepEffectTable_CrouchWalk = "impacteffect/footsteps/ai_marauder";
			footstepEffectTable_Landing = "impacteffect/footsteps/ai_marauder_landing";
			footstepEffectTable_HeavyLanding = "impacteffect/footsteps/ai_marauder_landing";
			ledgeGrabEffectTable = "impacteffect/footsteps/ai_marauder";
			ledgeGrabEffectTable_Heavy = "impacteffect/footsteps/ai_marauder";
			ledgeGrabEffectTable_Friendly = "impacteffect/footsteps/ai_marauder";
			ledgeGrabEffectTable_FriendlyHeavy = "impacteffect/footsteps/ai_marauder";
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/marauder/base";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 1;
						item[0] = {
							damageGroupName = "left_upper_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 6;
				item[0] = "head_part01_md";
				item[1] = "spine_part01_md";
				item[2] = "arm_hand_lf";
				item[3] = "arm_hand_rt";
				item[4] = "leg_lower_lf";
				item[5] = "leg_lower_rt";
			}
		}
		factionName = "marauder";
		mass = 18.1439991;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/default_superheavy";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_superheavy_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/base";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/base";
					}
					ptr[7] = {
						componentDecl = "marauder";
					}
					ptr[9] = {
						componentDecl = "aicomponent/positionawareness/marauder/base";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 2;
					item[0] = "syncmelee/marauder";
					item[1] = "syncmelee/marauder_3p";
				}
				syncGroups = {
					num = 1;
					item[0] = {
						syncGroupName = "";
						syncInteractions = {
							num = 10;
							item[0] = "syncdeath/playervsai/marauder/front_upper";
							item[1] = "syncdeath/playervsai/marauder/berserk/berserk_above_front";
							item[2] = "syncdeath/playervsai/marauder/above_front";
							item[3] = "syncdeath/playervsai/marauder/left_upper";
							item[4] = "syncdeath/playervsai/marauder/above_back";
							item[5] = "syncdeath/playervsai/marauder/berserk/berserk_front_upper";
							item[6] = "syncdeath/playervsai/marauder/right_upper";
							item[7] = "syncdeath/playervsai/marauder/crucbile/crucible_back";
							item[8] = "syncdeath/playervsai/marauder/crucbile/crucible_front";
							item[9] = "syncdeath/playervsai/marauder/back_upper";
						}
					}
				}
			}
			aiDeathCodex = "codex/hell/demon_marauder";
			positioningParms = {
				num = 1;
				item[0] = "marauder/default";
			}
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 75;
				obstaclePerceptionRadius = 78;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 39;
				senseUpdatesOnNonEnemies = false;
				fieldOfView = {
					value = 360;
				}
				fieldOfView_close = {
					value = 360;
				}
				exposedSightTime = 0;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = false;
				explosionDecl = "ai/default";
				declTwitchPain = "twitchpain/marauder";
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
			}
			cover = {
				coverRadius = 0;
			}
			behaviors = {
				decl = "behaviors/marauder/default";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/marauder";
			}
			vsAIDamageMask = "PAIN";
			spawnSettings = {
				entranceAnimPath = "animweb/characters/monsters/marauder/spawn/teleport_entrance";
				spawnFXEntityDef = "fx/spawn_in_superheavy";
				teleportDelayMS = 2000;
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 5000;
					starting = 5000;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/superheavy/marauder";
		}
		afProperties = {
			impactEffectTable = "impacteffect/ragdoll/ragdoll_super_heavy";
			articulatedFigure = "characters/monsters/marauder";
		}
		renderModelInfo = {
			model = "md6def/characters/monsters/marauder/base/marauder.md6";
			lightRigDecl = "marauder/marauder_default";
		}
		killerNames = {
			num = 1;
			item[0] = "#str_decl_damage_marauder_GHOST81202";
		}
		fxDecl = "character/marauder/marauder";
		startingInventory = {
			num = 1;
			item[0] = {
				startSlot = "HOLSTERED";
				inventoryDecl = "weapon/ai/marauder/shotgun";
			}
		}
		spawnPosition = {
			x = 4.29999781;
			y = 163.34996;
			z = -2921.30005;
		}
		flags = {
			hide = true;
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_superheavy_tyrant {
	inherit = "ai/superheavy/tyrant";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 1.29999995;
				y = 1.29999995;
				z = 4;
			}
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "characters/tyrant";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 1.71500003;
				}
				crouchedEyeOffset = {
					z = 1.06700003;
				}
			}
			actorSounds = {
				sndFootsteps = "play_md6_editor_footstep";
			}
			footstepEffectTable = "impacteffect/footsteps/ai_tyrant";
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 10000;
				decayRate = -1500;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 0.75;
			}
			rearFootstepEffectTable = "impacteffect/footsteps/ai_tyrant_metal";
			footstepEffectTable_Sprint = "impacteffect/footsteps/ai_tyrant_sprint";
			rearFootstepEffectTable_Sprint = "impacteffect/footsteps/ai_tyrant_metal_sprint";
			footstepEffectTable_SlowWalk = "impacteffect/footsteps/ai_tyrant";
			rearFootstepEffectTable_SlowWalk = "impacteffect/footsteps/ai_tyrant_metal";
			footstepEffectTable_CrouchWalk = "impacteffect/footsteps/ai_tyrant";
			footstepEffectTable_Landing = "impacteffect/footsteps/ai_tyrant_landing";
			footstepEffectTable_HeavyLanding = "impacteffect/footsteps/ai_tyrant_landing";
			ledgeGrabEffectTable = "impacteffect/footsteps/ai_hellknight";
			ledgeGrabEffectTable_Heavy = "impacteffect/footsteps/ai_hellknight";
			ledgeGrabEffectTable_Friendly = "impacteffect/footsteps/ai_hellknight";
			ledgeGrabEffectTable_FriendlyHeavy = "impacteffect/footsteps/ai_hellknight";
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/tyrant/base";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 1;
						item[0] = {
							damageGroupName = "left_upper_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 11;
				item[0] = "head_part01_md";
				item[1] = "spine_part01_md";
				item[2] = "arm_hand_lf";
				item[3] = "arm_hand_rt";
				item[4] = "leg_lower_lf";
				item[5] = "leg_lower_rt";
				item[6] = "spine_part04_md";
				item[7] = "arm_lower_lf";
				item[8] = "arm_lower_rt";
				item[9] = "leg_foot_lf";
				item[10] = "leg_foot_rt";
			}
		}
		factionName = "tyrant";
		mass = 18.1439991;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/default_superheavy";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_superheavy_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/baron";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/baron";
					}
					ptr[6] = {
						componentDecl = "aicomponent/baron";
					}
					ptr[9] = {
						componentDecl = "aicomponent/positionawareness/tyrant/base";
					}
					ptr[10] = {
						componentDecl = "aicomponent/extendedsense/tyrant/base";
					}
					ptr[11] = {
						componentDecl = "aicomponent/transientfocus/demon/hellknight_default";
					}
					ptr[15] = {
						componentDecl = "aicomponent/waveblast/tyrant/seeker";
					}
					ptr[21] = {
						componentDecl = "aicomponent/lasertargeter/demon/tyrant";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 2;
					item[0] = "syncmelee/tyrant";
					item[1] = "syncmelee/tyrant_3p";
				}
				syncGroups = {
					num = 1;
					item[0] = {
						syncGroupName = "";
						syncInteractions = {
							num = 7;
							item[0] = "syncdeath/playervsai/tyrant/front_upper";
							item[1] = "syncdeath/playervsai/tyrant/above_front";
							item[2] = "syncdeath/playervsai/tyrant/berserk/berserk_above_front";
							item[3] = "syncdeath/playervsai/tyrant/back_upper";
							item[4] = "syncdeath/playervsai/tyrant/berserk/berserk_front_upper";
							item[5] = "syncdeath/playervsai/tyrant/crucbile/crucible_front";
							item[6] = "syncdeath/playervsai/tyrant/crucbile/crucible_back";
						}
					}
				}
			}
			aiDeathStat = "STAT_BARON_KILLED";
			aiDeathCodex = "codex/hell/demon_tyrant";
			positioningParms = {
				num = 1;
				item[0] = "tyrant/default";
			}
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 75;
				obstaclePerceptionRadius = 78;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 39;
				senseUpdatesOnNonEnemies = false;
				fieldOfView = {
					value = 360;
				}
				fieldOfView_close = {
					value = 360;
				}
				exposedSightTime = 0;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = false;
				explosionDecl = "ai/default";
				declTwitchPain = "twitchpain/tyrant";
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
			}
			cover = {
				coverRadius = 200;
				maxEnemyCoverDistance = 200;
			}
			behaviors = {
				decl = "behaviors/tyrant/default";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/tyrant";
			}
			vsAIDamageMask = "PAIN";
			spawnSettings = {
				entranceAnimPath = "animweb/characters/monsters/arachnotron/spawn/teleport_entrance";
				spawnFXEntityDef = "fx/spawn_in_tyrant";
				teleportDelayMS = 2000;
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 10000;
					starting = 10000;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/superheavy/tyrant";
		}
		afProperties = {
			impactEffectTable = "impacteffect/ragdoll/ragdoll_super_heavy";
			articulatedFigure = "characters/monsters/tyrant";
		}
		renderModelInfo = {
			model = "md6def/characters/monsters/tyrant/base/tyrant.md6";
			lightRigDecl = "tyrant/tyrant_default";
		}
		killerNames = {
			num = 1;
			item[0] = "#str_decl_codex_hell_demons_tyrant";
		}
		fxDecl = "character/tyrant/tyrant";
		startingInventory = {
			num = 4;
			item[0] = {
				startSlot = "EQUIPPED";
				inventoryDecl = "weapon/ai/tyrant/rocket_base";
			}
			item[1] = {
				inventoryDecl = "weapon/ai/tyrant/rocket_combo";
			}
			item[2] = {
				inventoryDecl = "weapon/ai/tyrant/rocket_rain";
			}
			item[3] = {
				inventoryDecl = "weapon/ai/tyrant/rocket_damaged";
			}
		}
		walkIKDecl = "walkik/hellknight";
		spawnPosition = {
			x = 6.79999733;
			y = 163.34996;
			z = -2921.30005;
		}
		flags = {
			hide = true;
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_ambient_buffpod {
	inherit = "ai/ambient/buffpod";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 0.600000024;
				y = 0.600000024;
				z = 1.829;
			}
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "characters/buffpod";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 1.71500003;
				}
				crouchedEyeOffset = {
					z = 1.06700003;
				}
			}
			actorSounds = {
				sndFootsteps = "play_md6_editor_footstep";
			}
			footstepEffectTable = "impacteffect/footsteps/ai_walk_s";
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				decayRate = 0;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 0.75;
			}
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/buffpod/default";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 1;
						item[0] = {
							damageGroupName = "left_upper_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 0;
			}
		}
		factionName = "buffpod";
		mass = 18.1439991;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/default_ambient";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/base";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/base";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 2;
					item[0] = "syncmelee/buffpod";
					item[1] = "syncmelee/buffpod_3p";
				}
				syncGroups = {
					num = 1;
					item[0] = {
						syncGroupName = "";
						syncInteractions = {
							num = 6;
							item[0] = "syncdeath/playervsai/buffpod/front";
							item[1] = "syncdeath/playervsai/buffpod/left";
							item[2] = "syncdeath/playervsai/buffpod/back";
							item[3] = "syncdeath/playervsai/buffpod/right";
							item[4] = "syncdeath/playervsai/buffpod/above_front";
							item[5] = "syncdeath/playervsai/buffpod/above_back";
						}
					}
				}
			}
			aiDeathCodex = "codex/hell/demon_buffpod";
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 75;
				obstaclePerceptionRadius = 78;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 39;
				senseUpdatesOnNonEnemies = false;
				fieldOfView = {
					value = 360;
				}
				fieldOfView_close = {
					value = 360;
				}
				exposedSightTime = 0;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = false;
				explosionDecl = "ai/default";
				onlyDieByGK = true;
				trigger = "hub_target_remove_66";
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
			}
			cover = {
				coverRadius = 0;
			}
			behaviors = {
				decl = "behaviors/buffpod/default";
				declBehaviorEvents = "behaviorevents/default";
			}
			vsAIDamageMask = "PAIN";
			ambient = {
				sndAmbient = "play_buff_pod_loop";
				sndAmbientEnd = "stop_buff_pod_loop";
			}
			spawnSettings = {
				notificationDecl = "hud/buff_pod_nearby";
			}
			buffModifiers = {
				num = 3;
				item[0] = {
					className = "idEntityModifier_Onslaught";
					object = {
						radius = 250;
						durationInSeconds = {
							minRange = 0.5;
							maxRange = 0.5;
						}
						fxCondition = "FX_BUFF_GENERIC";
						damageScale = 1;
						upgradesDecl = "buffpod";
					}
				}
				item[1] = {
					className = "idEntityModifier_Overdrive";
					object = {
						radius = 250;
						durationInSeconds = {
							minRange = 0.5;
							maxRange = 0.5;
						}
						fxCondition = "FX_BUFF_GENERIC";
						upgradesDecl = "buffpod";
					}
				}
				item[2] = {
					className = "idEntityModifier_Berserk";
					object = {
						radius = 250;
						durationInSeconds = {
							minRange = 0.5;
							maxRange = 0.5;
						}
						fxCondition = "FX_BUFF_GENERIC";
						painTakenScale = 1;
						upgradesDecl = "buffpod";
					}
				}
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/ambient/buffpod";
		}
		renderModelInfo = {
			model = "md6def/characters/ambient/buffpod/base/buffpod.md6";
			lightRigDecl = "buffpod/buffpod_default";
		}
		fxDecl = "character/buffpod/buffpod_main";
		spawnPosition = {
			x = 4.90000391;
			y = 155.149979;
			z = -2921.30005;
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_fodder_zombie_maykr {
	inherit = "ai/fodder/zombie_maykr";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 0.400000006;
				y = 0.400000006;
				z = 1.5;
			}
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "characters/maykr_zombie";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 1.63829994;
				}
				crouchedEyeOffset = {
					z = 0.609600008;
				}
			}
			actorSounds = {
				sndFootsteps = "footsteps/zombies/zombies_default";
				sndPainSmall = "player/pain/small";
				sndPainMedium = "player/pain/medium";
				sndPainLarge = "player/pain/large";
			}
			footstepEffectTable = "impacteffect/footsteps/ai_zombie";
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 800;
				decayRate = -40;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 1;
			}
			footstepEffectTable_Sprint = "impacteffect/footsteps/ai_zombie_sprint";
			footstepEffectTable_SlowWalk = "impacteffect/footsteps/ai_zombie";
			footstepEffectTable_CrouchWalk = "impacteffect/footsteps/ai_zombie";
			footstepEffectTable_Landing = "impacteffect/footsteps/ai_zombie_landing";
			footstepEffectTable_HeavyLanding = "impacteffect/footsteps/ai_zombie_landing";
			ledgeGrabEffectTable = "impacteffect/footsteps/ai_zombie";
			ledgeGrabEffectTable_Heavy = "impacteffect/footsteps/ai_zombie";
			ledgeGrabEffectTable_Friendly = "impacteffect/footsteps/ai_zombie";
			ledgeGrabEffectTable_FriendlyHeavy = "impacteffect/footsteps/ai_zombie";
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/zombie_maykr/base";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 1;
						item[0] = {
							damageGroupName = "left_upper_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 3;
				item[0] = "head_part01_md";
				item[1] = "spine_part01_md";
				item[2] = "tail_part04_md";
			}
		}
		factionName = "maykr_minion";
		mass = 18.1439991;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/fodder/zombie_maykr";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_fodder_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/zombie";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/base";
					}
					ptr[9] = {
						componentDecl = "aicomponent/positionawareness/zombie/maykr";
					}
					ptr[10] = {
						componentDecl = "aicomponent/extendedsense/zombie/zombie_maykr";
					}
					ptr[28] = {
						componentDecl = "aicomponent/whiplash/zombie_maykr";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 2;
					item[0] = "syncmelee/zombie_maykr";
					item[1] = "syncmelee/zombie_maykr_3p";
				}
				syncGroups = {
					num = 1;
					item[0] = {
						syncGroupName = "";
						syncInteractions = {
							num = 12;
							item[0] = "syncdeath/playervsai/zombie_maykr/above_back";
							item[1] = "syncdeath/playervsai/zombie_maykr/above_front";
							item[2] = "syncdeath/playervsai/zombie_maykr/right_upper";
							item[3] = "syncdeath/playervsai/zombie_maykr/berserk/berserk_above_front";
							item[4] = "syncdeath/playervsai/zombie_maykr/left_upper";
							item[5] = "syncdeath/playervsai/zombie_maykr/berserk/berserk_front_upper";
							item[6] = "syncdeath/playervsai/zombie_maykr/front_upper";
							item[7] = "syncdeath/playervsai/zombie_maykr/crucbile/crucible_front";
							item[8] = "syncdeath/playervsai/zombie_maykr/crucbile/crucible_back";
							item[9] = "syncdeath/playervsai/zombie_maykr/back_upper";
							item[10] = "syncdeath/playervsai/zombie_maykr/chainsaw/cut_front";
							item[11] = "syncdeath/playervsai/zombie_maykr/chainsaw/cut_back";
						}
					}
				}
			}
			aiDeathStat = "STAT_ZOMBIE_KILLED";
			aiDeathCodex = "codex/maykr/maykr_drones";
			positioningParms = {
				num = 1;
				item[0] = "zombie/maykr";
			}
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 39;
				obstaclePerceptionRadius = 78;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 39;
				senseUpdatesOnNonEnemies = false;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = true;
				explosionDecl = NULL;
				declTwitchPain = "twitchpain/zombie_maykr";
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
				preferredCombatWalkState = "WALKSTATE_WALKING";
			}
			cover = {
				coverRadius = 50;
			}
			behaviors = {
				decl = "behaviors/zombie_maykr/default";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/zombie_maykr";
			}
			vsAIDamageMask = "PAIN";
			ambient = {
				sndAmbient = "play_maykr_zombie_hover";
				sndAmbientEnd = "stop_maykr_zombie_hover";
			}
			spawnSettings = {
				entranceAnimPath = "animweb/characters/monsters/zombie_maykr/spawn/teleport_entrance";
				spawnFXEntityDef = "fx/spawn_in_fodder";
				teleportDelayMS = 750;
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 800;
					starting = 800;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/fodder/zombie_maykr";
		}
		afProperties = {
			impactEffectTable = "impacteffect/ragdoll/ragdoll_fodder";
			articulatedFigure = "characters/monsters/zombie_maykr";
		}
		renderModelInfo = {
			model = "md6def/characters/monsters/zombie_maykr/base/zombie_maykr.md6";
			lightRigDecl = "zombie_maykr/zombie_maykr_default";
			emissiveColor = {
				g = 0.109803997;
				b = 0.082352899;
			}
		}
		killerNames = {
			num = 1;
			item[0] = "#str_decl_codex_hell_demons_zombie_maykr";
		}
		fxDecl = "character/zombie_maykr/maykr_basic";
		startingInventory = {
			num = 2;
			item[0] = {
				startSlot = "EQUIPPED";
				inventoryDecl = "weapon/ai/zombie/maykr_basic";
				entityDef = "weapon_ent/ai/soldier/plasma";
			}
			item[1] = {
				inventoryDecl = "weapon/ai/zombie/maykr_basic_turret";
				entityDef = "weapon_ent/ai/soldier/plasma";
			}
		}
		walkIKDecl = "walkik/zombie";
		spawnPosition = {
			x = -596.000183;
			y = -609;
			z = -174.1987;
		}
	}
}
}
