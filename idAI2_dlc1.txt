
// Automatically added 5 idAI2 entities from DLC 1:

// custom_ai_ambient_turret
// custom_ai_heavy_bloodangel
// custom_ai_ambient_super_tentacle
// custom_ai_heavy_whiplash_spectre
// custom_ai_ambient_spirit

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_ambient_turret {
	inherit = "ai/ambient/turret";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 1.10000002;
				y = 1.10000002;
				z = 2.20000005;
			}
			forceObstacle = true;
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "characters/turret";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 1.71500003;
				}
				crouchedEyeOffset = {
					z = 1.06700003;
				}
			}
			actorSounds = {
				sndFootsteps = "play_md6_editor_footstep";
			}
			footstepEffectTable = "impacteffect/footsteps/ai_walk_s";
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 150;
				decayRate = 0;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 0.75;
			}
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/turret/default";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 1;
						item[0] = {
							damageGroupName = "left_upper_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 1;
				item[0] = "base_com_md";
			}
			radiusDamageHitTestGroups = {
				num = 1;
				item[0] = "base";
			}
		}
		factionName = "turret";
		mass = 18.1439991;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/ambient/turret";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/ambient/turret";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/base";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/base";
					}
					ptr[13] = {
						componentDecl = "aicomponent/turret";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 1;
					item[0] = "syncmelee/turret";
				}
				syncGroups = {
					num = 1;
					item[0] = {
						syncGroupName = "";
					}
				}
			}
			aiDeathCodex = "";
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 50;
				obstaclePerceptionRadius = 0;
				closePerceptionRadius = 50;
				eventPerceptionRadius = 39;
				senseUpdatesOnNonEnemies = false;
				fieldOfView = {
					value = 360;
				}
				fieldOfView_close = {
					value = 360;
				}
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = false;
				explosionDecl = "ai/default";
				declTwitchPain = "twitchpain/turret";
				allowInvalidSuicide = false;
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
				turretMode = true;
			}
			cover = {
				coverRadius = 0;
			}
			behaviors = {
				decl = "behaviors/turret/default";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/turret";
			}
			vsAIDamageMask = "PAIN";
			ambient = {
				sndAmbient = "play_turret_idle";
			}
			spawnSettings = {
				timers_setOnSpawn = {
					num = 1;
					item[0] = {
						name = "spawn";
					}
				}
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 1000;
					starting = 1000;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/ambient/turret";
		}
		renderModelInfo = {
			model = "md6def/characters/ambient/turret/base/turret.md6";
			lightRigDecl = "turret/turret_default";
			materialRemap = {
				num = 1;
				item[0] = {
					from = "art/ai_props/turret/turret_eye_a";
					to = "art/ai_props/turret/turret_eye_a2";
				}
			}
			scale = {
				x = 1.25;
				y = 1.25;
				z = 1.25;
			}
		}
		fxDecl = "character/turret/turret";
		startingInventory = {
			num = 1;
			item[0] = {
				startSlot = "EQUIPPED";
				inventoryDecl = "weapon/ai/turret/turret";
			}
		}
		spawnPosition = {
			x = 36.5499649;
			y = 360.549835;
			z = 118;
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_heavy_bloodangel {
	inherit = "ai/heavy/bloodangel";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 0.699999988;
				y = 0.699999988;
				z = 2.29999995;
			}
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "characters/bloodangel";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 1.71500003;
				}
				crouchedEyeOffset = {
					z = 1.06700003;
				}
			}
			actorSounds = {
				sndFootsteps = "play_md6_editor_footstep";
			}
			footstepEffectTable = "impacteffect/footsteps/ai_walk_s";
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 3000;
				decayRate = -300;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 0.75;
			}
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/bloodangel/base";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 1;
						item[0] = {
							damageGroupName = "left_upper_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 5;
				item[0] = "head_part01_md";
				item[1] = "spine_part01_md";
				item[2] = "arm_lower_rt";
				item[3] = "arm_lower_lf";
				item[4] = "skirt_part03_md";
			}
		}
		factionName = "blood_angel";
		mass = 18.1439991;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/heavy/bloodangel";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = NULL;
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/base";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/base";
					}
					ptr[7] = {
						componentDecl = "bloodangel";
					}
					ptr[9] = {
						componentDecl = "aicomponent/positionawareness/bloodangel/base";
					}
					ptr[15] = {
						componentDecl = "aicomponent/waveblast/bloodangel/clearout";
					}
					ptr[31] = {
						componentDecl = "aicomponent/bloodangel/bloodangel";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 1;
					item[0] = "syncmelee/bloodangel";
				}
				syncGroups = {
					num = 1;
					item[0] = {
						syncGroupName = "";
						syncInteractions = {
							num = 10;
							item[0] = "syncdeath/playervsai/bloodangel/chainsaw/cut_front";
							item[1] = "syncdeath/playervsai/bloodangel/chainsaw/cut_back";
							item[2] = "syncdeath/playervsai/bloodangel/berserk/berserk_front_upper";
							item[3] = "syncdeath/playervsai/bloodangel/front_upper";
							item[4] = "syncdeath/playervsai/bloodangel/above_front";
							item[5] = "syncdeath/playervsai/bloodangel/berserk/berserk_above_front";
							item[6] = "syncdeath/playervsai/bloodangel/above_back";
							item[7] = "syncdeath/playervsai/bloodangel/back_upper";
							item[8] = "syncdeath/playervsai/bloodangel/left_upper";
							item[9] = "syncdeath/playervsai/bloodangel/right_upper";
						}
					}
				}
			}
			aiDeathCodex = "codex/hell/demon_bloodangel";
			positioningParms = {
				num = 2;
				item[0] = "bloodangel/default";
				item[1] = "bloodangel/evasive";
			}
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 39;
				obstaclePerceptionRadius = 78;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 39;
				senseUpdatesOnNonEnemies = false;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = false;
				explosionDecl = "ai/default";
				declTwitchPain = "twitchpain/bloodangel";
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
			}
			cover = {
				coverRadius = 40;
				maxEnemyCoverDistance = 40;
			}
			behaviors = {
				decl = "behaviors/bloodangel/default";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/bloodangel";
			}
			vsAIDamageMask = "PAIN";
			spawnSettings = {
				entranceAnimPath = "animweb/characters/monsters/bloodangel/spawn/teleport_entrance";
				spawnFXEntityDef = "fx/spawn_in_heavy";
				teleportDelayMS = 1250;
				initialState = "AIOVERRIDE_TELEPORT";
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 5000;
					starting = 5000;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/heavy/bloodangel";
		}
		afProperties = {
			impactEffectTable = "impacteffect/ragdoll/ragdoll_heavy";
			articulatedFigure = "characters/monsters/bloodangel";
		}
		renderModelInfo = {
			model = "md6def/characters/monsters/bloodangel/base/bloodangel.md6";
			lightRigDecl = "bloodangel/bloodangel_default";
			materialRemap = {
				num = 4;
				item[0] = {
					from = "art/tile/common/blockout/gray_01_flat";
					to = "models/monsters/bloodangel/gray_temp";
				}
				item[1] = {
					from = "art/tile/common/blockout/gray_03";
					to = "models/monsters/bloodangel/gray_03_temp";
				}
				item[2] = {
					from = "art/tile/common/blockout/gray_04";
					to = "models/monsters/bloodangel/gray_04_temp";
				}
				item[3] = {
					from = "art/tile/common/blockout/red_01";
					to = "models/monsters/bloodangel/bloodangel_webbing";
				}
			}
		}
		fxDecl = "character/bloodangel/bloodangel";
		startingInventory = {
			num = 2;
			item[0] = {
				inventoryDecl = "weapon/ai/bloodangel/ethereal_joust";
			}
			item[1] = {
				startSlot = "EQUIPPED";
				inventoryDecl = "weapon/ai/bloodangel/burst_fire";
			}
		}
		spawnPosition = {
			x = 1164.05005;
			y = 482.000092;
			z = 57.0999985;
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_ambient_super_tentacle {
	inherit = "ai/ambient/super_tentacle";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_CYLINDER";
			size = {
				x = 1.29999995;
				y = 1.29999995;
				z = 3;
			}
			numSides = 8;
			forceObstacle = true;
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "default";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 1.71500003;
				}
				crouchedEyeOffset = {
					z = 1.06700003;
				}
			}
			actorSounds = {
				sndFootsteps = "play_md6_editor_footstep";
			}
			footstepEffectTable = "impacteffect/footsteps/ai_walk_s";
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 150;
				decayRate = 0;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 0.75;
			}
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/super_tentacle/default";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 1;
						item[0] = {
							damageGroupName = "left_upper_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 5;
				item[0] = "tentaclesec_part01_md";
				item[1] = "tentaclesec_part03_md";
				item[2] = "tentaclesec_part05_md";
				item[3] = "tentaclesec_part09_md";
				item[4] = "tentaclesec_part13_md";
			}
		}
		factionName = "super_tentacle";
		mass = 18.1439991;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/ambient/super_tentacle";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = NULL;
					}
					ptr[14] = {
						componentDecl = NULL;
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 1;
					item[0] = "syncmelee/super_tentacle";
				}
			}
			componentList = "ambient/super_tentacle";
			aiDeathCodex = "codex/hell/demon_tentacle";
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 39;
				obstaclePerceptionRadius = 78;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 39;
				senseUpdatesOnNonEnemies = false;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = false;
				explosionDecl = "ai/default";
				declTwitchPain = "twitchpain/super_tentacle";
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
			}
			cover = {
				coverRadius = 0;
			}
			behaviors = {
				decl = "behaviors/super_tentacle/default";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/super_tentacle";
			}
			vsAIDamageMask = "PAIN";
			ambient = {
				sndAmbient = "play_tentacle_idle_loop";
			}
			spawnSettings = {
				timers_setOnSpawn = {
					num = 1;
					item[0] = {
						name = "spawn";
					}
				}
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 4000;
					starting = 4000;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/ambient/super_tentacle";
		}
		renderModelInfo = {
			model = "md6def/characters/ambient/super_tentacle/base/super_tentacle.md6";
			lightRigDecl = "tentacle/tentacle_default";
			materialRemap = {
				num = 2;
				item[0] = {
					from = "models/characters/ambient/tentacle/tentacle";
					to = "models/characters/ambient/super_tentacle/super_tentacle";
				}
				item[1] = {
					from = "models/characters/ambient/tentacle/tentacle_wounds";
					to = "models/characters/ambient/super_tentacle/super_tentacle_wounds";
				}
			}
			scale = {
				x = 8;
				y = 8;
				z = 8;
			}
		}
		killerNames = {
			num = 1;
			item[0] = "#str_decl_codex_hell_demons_tentacle";
		}
		fxDecl = "character/super_tentacle/super_tentacle";
		spawnPosition = {
			x = -1650.40051;
			y = -224.599884;
			z = -149.884201;
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_heavy_whiplash_spectre {
	inherit = "ai/heavy/whiplash_spectre";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 0.600000024;
				y = 0.600000024;
				z = 1.829;
			}
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "characters/whiplash_spectre";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 1.71500003;
				}
				crouchedEyeOffset = {
					z = 1.06700003;
				}
			}
			actorSounds = {
				sndFootsteps = "play_md6_editor_footstep";
			}
			footstepEffectTable = "impacteffect/footsteps/ai_walk_s";
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 2000;
				decayRate = -200;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 0.75;
			}
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/whiplash/base";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 1;
						item[0] = {
							damageGroupName = "left_upper_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 8;
				item[0] = "head_part01_md";
				item[1] = "spine_part01_md";
				item[2] = "arm_hand_lf";
				item[3] = "arm_hand_rt";
				item[4] = "tail_part03_md";
				item[5] = "tail_part05_md";
				item[6] = "tail_part09_md";
				item[7] = "tail_part13_md";
			}
		}
		factionName = "whiplash";
		mass = 18.1439991;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/default_heavy";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_heavy_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/base";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/base";
					}
					ptr[7] = {
						componentDecl = "whiplash";
					}
					ptr[9] = {
						componentDecl = "aicomponent/positionawareness/whiplash/base";
					}
					ptr[13] = {
						componentDecl = "aicomponent/whiplash";
					}
					ptr[15] = {
						componentDecl = "aicomponent/waveblast/whiplash/lashes";
					}
					ptr[28] = {
						componentDecl = "aicomponent/whiplash/whiplash";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
				syncMeleeEntityDefs = {
					num = 2;
					item[0] = "syncmelee/whiplash";
					item[1] = "syncmelee/whiplash_3p";
				}
				syncGroups = {
					num = 1;
					item[0] = {
						syncGroupName = "";
						syncInteractions = {
							num = 12;
							item[0] = "syncdeath/playervsai/whiplash/right_upper";
							item[1] = "syncdeath/playervsai/whiplash/back_upper";
							item[2] = "syncdeath/playervsai/whiplash/above_front";
							item[3] = "syncdeath/playervsai/whiplash/above_back";
							item[4] = "syncdeath/playervsai/whiplash/crucbile/crucible_front";
							item[5] = "syncdeath/playervsai/whiplash/crucbile/crucible_back";
							item[6] = "syncdeath/playervsai/whiplash/front_upper";
							item[7] = "syncdeath/playervsai/whiplash/chainsaw/cut_front";
							item[8] = "syncdeath/playervsai/whiplash/chainsaw/cut_back";
							item[9] = "syncdeath/playervsai/whiplash/left_upper";
							item[10] = "syncdeath/playervsai/whiplash/berserk/berserk_above_front";
							item[11] = "syncdeath/playervsai/whiplash/berserk/berserk_front_upper";
						}
					}
				}
			}
			aiDeathCodex = "codex/hell/demon_whiplash";
			positioningParms = {
				num = 1;
				item[0] = "whiplash/default";
			}
			defaultHitJoint = "spine_part01_md";
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 39;
				obstaclePerceptionRadius = 78;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 39;
				senseUpdatesOnNonEnemies = false;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = false;
				explosionDecl = "ai/default";
				deathSounds = {
					num = 1;
					item[0] = {
						soundShader = "stop_whiplash_flank_loop_1";
					}
				}
				declTwitchPain = "twitchpain/whiplash";
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
			}
			cover = {
				coverRadius = 39.0139999;
				maxEnemyCoverDistance = 39.0139999;
			}
			behaviors = {
				decl = "behaviors/whiplash/spectre";
				declBehaviorEvents = "behaviorevents/default";
				attackGraph = "ai/whiplash";
			}
			vsAIDamageMask = "PAIN";
			spawnSettings = {
				entranceAnimPath = "animweb/characters/monsters/whiplash/combat/idle";
				spawnFXEntityDef = NULL;
				teleportDelayMS = 0;
				initialState = "AIOVERRIDE_TELEPORT";
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 2000;
					starting = 2000;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/heavy/whiplash";
		}
		afProperties = {
			impactEffectTable = "impacteffect/ragdoll/ragdoll_heavy";
			articulatedFigure = "characters/monsters/whiplash";
		}
		renderModelInfo = {
			model = "md6def/characters/monsters/whiplash/base/whiplash_spectre.md6";
			lightRigDecl = "whiplash/whiplash_default";
		}
		fxDecl = "character/whiplash/whiplash_spectre";
		killerNames = {
			num = 1;
			item[0] = "#str_decl_damage_whiplash_spectre_GHOST81207";
		}
		spawnPosition = {
			x = 109.000038;
			y = -25.900013;
			z = -13;
		}
		spawnOrientation = {
			mat = {
				mat[0] = {
					x = -4.76837101e-07;
					y = -1;
				}
				mat[1] = {
					x = 1;
					y = -4.76837101e-07;
				}
			}
		}
	}
}
}

entity {
	layers {
		"spawn_target_layer"
	}
	entityDef custom_ai_ambient_spirit {
	inherit = "ai/ambient/spirit";
	class = "idAI2";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = true;
	disableAIPooling = false;
	edit = {
		highlightDecl = "glorykill_highlight";
		clipModelInfo = {
			type = "CLIPMODEL_BOX";
			size = {
				x = 0.600000024;
				y = 0.600000024;
				z = 1.829;
			}
		}
		dormancy = {
			delay = 30;
			distance = 19.5070019;
		}
		spawn_statIncreases = {
			num = 1;
			item[0] = {
				stat = "STAT_AI_SPAWNED";
				increase = 1;
			}
		}
		targetingDecl = "characters/spirit";
		actorConstants = {
			perception = {
				eyeOffset = {
					z = 1.71500003;
				}
				crouchedEyeOffset = {
					z = 1.06700003;
				}
			}
			actorSounds = {
				sndFootsteps = "play_md6_editor_footstep";
			}
			footstepEffectTable = "impacteffect/footsteps/ai_walk_s";
			footstepEvents = "footstepevents/default";
			painInfo = {
				decayDelay = 1000;
				bucketMaxValue = 150;
				decayRate = 0;
			}
			bulletPenetrationData = {
				energyCostToPenetrate = 10;
				damageScaleToPenetrate = 0.75;
			}
		}
		actorEditable = {
			entityDamageComponent = {
				entityDamage = "entitydamage/ai/spirit/default";
			}
			injuredStates = {
				num = 1;
				item[0] = {
					name = "not_injured";
					damageGroupMaxGoreLevels = {
						num = 1;
						item[0] = {
							damageGroupName = "left_upper_leg";
							maxGoreLevel = "GORELEVEL_LIGHT_DAMAGE";
						}
					}
					allowIK = true;
					canUseAllTraversalsWhileInjured = true;
					canUseDownTraversalsWhileInjured = true;
				}
			}
			radiusDamageJoints = {
				num = 6;
				item[0] = "head";
				item[1] = "spine2";
				item[2] = "rightforearm";
				item[3] = "leftforearm";
				item[4] = "rightleg";
				item[5] = "leftleg";
			}
		}
		factionName = "spirit";
		mass = 18.1439991;
		lootable = false;
		lootDropComponent = {
			lootDropDataDecl = "ai/ambient/spirit";
		}
		pvpLootDropComponent = {
			lootDropDataDecl = "ai/default_pvp";
		}
		aiConstants = {
			components = {
				ptr = {
					ptr[12] = {
						componentDecl = "aicomponent/pathmanager/base";
					}
					ptr[14] = {
						componentDecl = "aicomponent/attack/base";
					}
				}
			}
			syncMelee = {
				msAfterAttackBeforeCanSync = 250;
			}
			componentList = "ambient/spirit";
			aiDeathCodex = "codex/hell/demon_spirit";
		}
		aiEditable = {
			perception = {
				actorPerceptionRadius = 39;
				obstaclePerceptionRadius = 78;
				closePerceptionRadius = 5;
				eventPerceptionRadius = 39;
				senseUpdatesOnNonEnemies = false;
			}
			useTouchComponent = true;
			death = {
				ignoreDamageType = "DAMAGETYPE_EMP";
				fadeOutAfterDeathDelay_Seconds = {
					value = 3;
				}
				removeAfterFadeOutDelay_Seconds = {
					value = 3;
				}
				canBecomeInjured = false;
				explosionDecl = "ai/default";
				declTwitchPain = "twitchpain/spirit";
				allowInvalidSuicide = false;
			}
			movement = {
				wanderRadius = 19.5070019;
				useTraversalClassA = true;
			}
			cover = {
				coverRadius = 0;
			}
			behaviors = {
				decl = "behaviors/spirit/default";
				declBehaviorEvents = "behaviorevents/default";
			}
			vsAIDamageMask = "PAIN";
			spawnSettings = {
				entranceAnimPath = "animweb/characters/ambient/spirit/spawn/teleport_entrance";
				timers_setOnSpawn = {
					num = 1;
					item[0] = {
						name = "spawn";
					}
				}
				initialState = "AIOVERRIDE_TELEPORT";
			}
			buffModifiers = {
				num = 3;
				item[0] = {
					className = "idEntityModifier_Onslaught";
					object = {
						radius = 250;
						durationInSeconds = {
							minRange = -1;
							maxRange = -1;
						}
						fxCondition = "FX_BUFF_SPIRIT";
						damageScale = 1;
						upgradesDecl = "spirit";
					}
				}
				item[1] = {
					className = "idEntityModifier_Overdrive";
					object = {
						radius = 250;
						durationInSeconds = {
							minRange = -1;
							maxRange = -1;
						}
						fxCondition = "FX_BUFF_SPIRIT";
						upgradesDecl = "spirit";
					}
				}
				item[2] = {
					className = "idEntityModifier_Berserk";
					object = {
						radius = 250;
						durationInSeconds = {
							minRange = -1;
							maxRange = -1;
						}
						fxCondition = "FX_BUFF_SPIRIT";
						painTakenScale = 1;
						upgradesDecl = "spirit";
						contextFlagsToApply = "AICONTEXT_POSSESSED_BY_SPIRIT";
					}
				}
			}
		}
		aiHealth = {
			components = {
				components[1] = {
					max = 0;
					regenInterval = {
						value = 0;
					}
				}
				components[0] = {
					max = 2750;
					starting = 2750;
				}
			}
		}
		goreComponent = {
			goreContainer = "ai/ambient/spirit";
		}
		renderModelInfo = {
			model = "md6def/characters/ambient/spirit/base/spirit.md6";
			lightRigDecl = "spirit/spirit_default";
		}
		fxDecl = "character/spirit/spirit";
		spawnPosition = {
			x = -1470.09998;
			y = -371.800018;
			z = -85;
		}
	}
}
}