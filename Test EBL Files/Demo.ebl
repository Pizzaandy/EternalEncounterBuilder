// This is a tutorial script showcasing current (and future) language features

////////////////
// HEADERS
////////////////

// an EBL file is split up by HEADERS:
// SETTINGS
// REPLACE ENCOUNTER
// REMOVE
// ADD
// MODIFY
// TEMPLATE
// INIT


SETTINGS
// certain keywords can be written under SETTINGS
// to toggle settings. Coming soon?


// Encounter Builder Language can be used to quickly script encounters! 
REPLACE ENCOUNTER encounter_entity_name


////////////////
// EVENTS
////////////////

// encounters are made of EVENTs!
// write an event like this:
spawnSingleAI(Arachnotron, spawn_target_1, group_label)
// If you don't know what the arguments are, look them up in ((TODO: make resource for this))

// commonly used events have aliases for convenience
// for example, spawnSingleAI can be written simply as spawn:
spawn(Arachnotron, spawn_target_1, group_label)


// optional arguments can be left blank:
spawn(Arachnotron, spawn_target_1, ) // the 3rd argument is blank
maintain(Soldier, 4, -1, 4, 3, my_macro+6, , 9) // the 2nd argument from the right is blank

// there are usually optional arguments at the ends of events.
// You can simply omit these:
spawn(Arachnotron, spawn_target_1)

// Some arguments have default values! Check ((TODO: make resource for this))
// to see which arguments have default values.
// Arguments with default values may be left blank.


// you can save some typing by writing repeated events like this:
spawn:
(Mancubus, spawn_target_2)
(CyberMancubus, spawn_target_3)
// is the same as
spawn(Mancubus, spawn_target_2)
spawn(CyberMancubus, spawn_target_3)
// the colon (:) is not required, but it is recommended for readability



////////////////
// WAIT EVENTS
////////////////

// the waitfor keyword is used for WAIT EVENTS
waitfor 3.5 sec
waitfor AIRemaining(Mancubus, 0)

// use waitfor blocks to check multiple conditions
waitfor any {
	AIRemaining:
	(CyberMancubus, 1)
	(Arachnotron, 0)
}
waitfor all {
	healthLevel(Arachnotron, 0.5)
	AIRemaining(CyberMancubus, 0)
}



////////////////
// MACROS
////////////////

// use MACROS to reduce typing!
my_macro = "destroyed_rig_encounter_spawn_group_zone_"
// is the same as
my_macro = destroyed_rig_encounter_spawn_group_zone_

spawnMultiple(Revenant, 3, destroyed_rig_encounter_spawn_group_zone_6)
// is the same as
spawnMultiple(Revenant, 3, my_macro + 6)

// the + operator joins strings together
firstname = "Doom "
lastname = Eternal

print(firstname + lastname) // prints "Doom Eternal" to console
print(firstname+firstname+lastname) // prints "Doom Doom Eternal" to console

// e.g.
my_fodder = Gargoyle Imp
my_spectre = Spectre
maintain:
(my_fodder, 4, -1, 4, 3, my_macro+6, , 9.0)
(my_spectre, 4, -1, 4, 3, my_macro+6, , 9.0)



////////////////
// WAVES
////////////////

// WAVES do absolutely nothing. Use them for organization!
Wave my_wave_name {
	spawn(Baron, spawn_target_1)
	waitfor 1 sec
	maintainAI:
	(Zombie, 7, -1, 3, 2, group1, , 0)
	(Revenant, 1, -1, 16, 2, group1, , 0)
	waitfor AIRemaining(Baron, 0)
	setMusicState(sound_sound_musicentity_1, music_ghost_states/main_ambient, Stop Heavy)
}



////////////////
// INIT
////////////////

// note: INIT is currently named END. will fix
// it is recommended to declare macros under INIT.
END
mancs = Mancubus CyberMancubus



////////////////
// MODIFYING ENTITIES
////////////////

// REMOVE removes existing entities
REMOVE e5m3_interact_gore_nest_escalation_3
REMOVE breach_wasteland_arena_trigger_trigger_wave_2_warning1
REMOVE breach_wasteland_arena_trigger_trigger_wave_2_warning

// ADD adds entirely new entities
// new entities must be defined in .entities format
ADD my_music
entity {
	entityDef my_music {
	inherit = "sound/musicentity";
	class = "idMusicEntity";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = false;
	disableAIPooling = false;
	edit = {
		spawnPosition = {
			x = -1935.5;
			y = -264.899994;
			z = -164.800018;
		}
		initialState = "music_ghost_states/none";
		initialSwitchGroup = "music_ghost_switch";
		initialSwitchState = "samuelsbase_music";
	}
}
}

// MODIFY can be used to change values in existing entities
MODIFY city_rooftop_encounter_spawn_group_zone_1
edit/spawners.pop:
(city_rooftop_target_spawn_10)
(city_rooftop_target_spawn_11)
edit/spawners.add(my_spawn_target)

MODIFY shooters__envhazard_shooters_hell_on_earth_9
edit/shooterList/item[0]/firingInterval.set(400)


// TEMPLATE allows adding multiple instances of the same entity!
// enclose argument names in {{ }} double brackets
// e.g.
TEMPLATE SpawnTarget(name, x, y, z, orientation)
entity {
	entityDef {{name}} {
	inherit = "target/spawn";
	class = "idTarget_Spawn";
	expandInheritance = false;
	poolCount = 0;
	poolGranularity = 2;
	networkReplicated = false;
	disableAIPooling = false;
	edit = {
		flags = {
			noFlood = true;
		}
		spawnConditions = {
			maxCount = 0;
			reuseDelaySec = 0;
			doBoundsTest = false;
			boundsTestType = "BOUNDSTEST_NONE";
			fovCheck = 0;
			minDistance = 0;
			maxDistance = 0;
			neighborSpawnerDistance = -1;
			LOS_Test = "LOS_NONE";
			playerToTest = "PLAYER_SP";
			conditionProxy = "";
		}
		spawnEditableShared = {
			groupName = "";
			deathTrigger = "";
			coverRadius = 0;
			maxEnemyCoverDistance = 0;
		}
		entityDefs = {
			num = 0;
		}
		conductorEntityAIType = "SPAWN_AI_TYPE_ANY";
		initialEntityDefs = {
			num = 0;
		}
		spawnEditable = {
			spawnAt = "";
			copyTargets = false;
			additionalTargets = {
				num = 0;
			}
			overwriteTraversalFlags = true;
			traversalClassFlags = "CLASS_A";
			combatHintClass = "CLASS_ALL";
			spawnAnim = "";
			aiStateOverride = "AIOVERRIDE_DEFAULT";
			initialTargetOverride = "";
		}
		portal = "";
		targetSpawnParent = "";
		disablePooling = false;
		spawnPosition = {
			x = {{x}};
			y = {{y}};
			z = {{z}};
		}
		spawnOrientation = {{orientation}}
	}
}
}

// creating two spawn targets with our template:
ADD SpawnTarget(platform_air_center, -731.46, -655.71, -129.05, Mat3[0 0 0])
ADD SpawnTarget(platform_air_left, -706.27, -625.8, -131.35, Mat3[90 0 0])

// you may notice the funky Mat3[0 0 0] argument at the end.
// that is a special type of built-in template that can be used to easily
// write positions and rotations in templates.

// built-in templates include:
// Mat3
// Mat2
// Vec3

////////////////
// KNOWN ISSUES
////////////////


////////////////
// FUTURE FEATURES
////////////////

// Tags
// these directives can be used to change 
// they are WIP

@portal
@anim forward_1000_down_1000
spawn(Chaingunner, target)

@teleport 5 sec
spawn(CursedProwler, target)